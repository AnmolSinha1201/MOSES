//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Nick\Documents\Visual Studio 2015\Projects\MOSES\Moses.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MOSES {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MosesParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, STRING=50, NAME=51, NUMBER=52, 
		INT=53, HEX=54, FLOAT=55, Digit=56, WS=57, NL=58;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_innerfunctionBlock = 2, RULE_tryCatchFinally = 3, 
		RULE_ifElseLadder = 4, RULE_returnBlock = 5, RULE_loopBlock = 6, RULE_classBlock = 7, 
		RULE_localConstVarAssign = 8, RULE_classDecl = 9, RULE_functionDecl = 10, 
		RULE_whileLoop = 11, RULE_loop = 12, RULE_loopParse = 13, RULE_loops = 14, 
		RULE_varAssign = 15, RULE_functionDef = 16, RULE_functionParameterList = 17, 
		RULE_functionParameterDefault = 18, RULE_functionParameterNoDefault = 19, 
		RULE_functionPrameterVariadic = 20, RULE_variadic = 21, RULE_ref = 22, 
		RULE_functionBody = 23, RULE_segmentBlock = 24, RULE_this = 25, RULE_complexFunctionCall = 26, 
		RULE_complexVariable = 27, RULE_variableOrFunction = 28, RULE_var = 29, 
		RULE_functionCall = 30, RULE_newInstance = 31, RULE_exp = 32, RULE_unaryOp = 33, 
		RULE_constExp = 34, RULE_prePostIncrDecr = 35, RULE_preIncrDecr = 36, 
		RULE_postIncrDecr = 37, RULE_incrDecr = 38, RULE_operatorOr = 39, RULE_operatorAnd = 40, 
		RULE_operatorComparison = 41, RULE_operatorPower = 42, RULE_operatorUnary = 43, 
		RULE_operatorAddSub = 44, RULE_operatorMulDivMod = 45, RULE_operatorBitwise = 46;
	public static readonly string[] ruleNames = {
		"chunk", "block", "innerfunctionBlock", "tryCatchFinally", "ifElseLadder", 
		"returnBlock", "loopBlock", "classBlock", "localConstVarAssign", "classDecl", 
		"functionDecl", "whileLoop", "loop", "loopParse", "loops", "varAssign", 
		"functionDef", "functionParameterList", "functionParameterDefault", "functionParameterNoDefault", 
		"functionPrameterVariadic", "variadic", "ref", "functionBody", "segmentBlock", 
		"this", "complexFunctionCall", "complexVariable", "variableOrFunction", 
		"var", "functionCall", "newInstance", "exp", "unaryOp", "constExp", "prePostIncrDecr", 
		"preIncrDecr", "postIncrDecr", "incrDecr", "operatorOr", "operatorAnd", 
		"operatorComparison", "operatorPower", "operatorUnary", "operatorAddSub", 
		"operatorMulDivMod", "operatorBitwise"
	};

	private static readonly string[] _LiteralNames = {
		null, "'try'", "'catch'", "'finally'", "'if'", "'('", "')'", "'else'", 
		"'return'", "'break'", "'continue'", "'='", "'class'", "'{'", "'}'", "'while'", 
		"'loop'", "'loopParse'", "','", "'*'", "'ref'", "'this'", "'.'", "'['", 
		"']'", "'new'", "' . '", "'++'", "'--'", "'||'", "'&&'", "'<'", "'>'", 
		"'<='", "'>='", "'!='", "'=='", "'**'", "'+'", "'-'", "'!'", "'~'", "'/'", 
		"'%'", "'//'", "'&'", "'|'", "'^'", "'<<'", "'>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STRING", "NAME", "NUMBER", "INT", "HEX", "FLOAT", "Digit", 
		"WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Moses.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MosesParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MosesParser.Eof, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__7) | (1L << T__11) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__20) | (1L << T__26) | (1L << T__27) | (1L << NAME))) != 0)) {
				{
				{
				State = 94; block();
				}
				}
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 100; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public InnerfunctionBlockContext innerfunctionBlock() {
			return GetRuleContext<InnerfunctionBlockContext>(0);
		}
		public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			State = 105;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; innerfunctionBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; functionDecl();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104; classDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerfunctionBlockContext : ParserRuleContext {
		public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		public ComplexFunctionCallContext complexFunctionCall() {
			return GetRuleContext<ComplexFunctionCallContext>(0);
		}
		public LoopsContext loops() {
			return GetRuleContext<LoopsContext>(0);
		}
		public IfElseLadderContext ifElseLadder() {
			return GetRuleContext<IfElseLadderContext>(0);
		}
		public ReturnBlockContext returnBlock() {
			return GetRuleContext<ReturnBlockContext>(0);
		}
		public PrePostIncrDecrContext prePostIncrDecr() {
			return GetRuleContext<PrePostIncrDecrContext>(0);
		}
		public TryCatchFinallyContext tryCatchFinally() {
			return GetRuleContext<TryCatchFinallyContext>(0);
		}
		public InnerfunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerfunctionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterInnerfunctionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitInnerfunctionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerfunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerfunctionBlockContext innerfunctionBlock() {
		InnerfunctionBlockContext _localctx = new InnerfunctionBlockContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_innerfunctionBlock);
		try {
			State = 114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; varAssign();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; complexFunctionCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109; loops();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110; ifElseLadder();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111; returnBlock();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 112; prePostIncrDecr();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 113; tryCatchFinally();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryCatchFinallyContext : ParserRuleContext {
		public SegmentBlockContext[] segmentBlock() {
			return GetRuleContexts<SegmentBlockContext>();
		}
		public SegmentBlockContext segmentBlock(int i) {
			return GetRuleContext<SegmentBlockContext>(i);
		}
		public TryCatchFinallyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryCatchFinally; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterTryCatchFinally(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitTryCatchFinally(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatchFinally(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryCatchFinallyContext tryCatchFinally() {
		TryCatchFinallyContext _localctx = new TryCatchFinallyContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_tryCatchFinally);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__0);
			State = 117; segmentBlock();
			State = 124;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 118; Match(T__1);
				State = 119; segmentBlock();
				State = 122;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 120; Match(T__2);
					State = 121; segmentBlock();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseLadderContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext[] segmentBlock() {
			return GetRuleContexts<SegmentBlockContext>();
		}
		public SegmentBlockContext segmentBlock(int i) {
			return GetRuleContext<SegmentBlockContext>(i);
		}
		public IfElseLadderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseLadder; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterIfElseLadder(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitIfElseLadder(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseLadder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseLadderContext ifElseLadder() {
		IfElseLadderContext _localctx = new IfElseLadderContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_ifElseLadder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(T__3);
			State = 127; Match(T__4);
			State = 128; exp(0);
			State = 129; Match(T__5);
			State = 130; segmentBlock();
			State = 133;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 131; Match(T__6);
				State = 132; segmentBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnBlockContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ReturnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterReturnBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitReturnBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnBlockContext returnBlock() {
		ReturnBlockContext _localctx = new ReturnBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_returnBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(T__7);
			State = 137;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 136; exp(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		public InnerfunctionBlockContext innerfunctionBlock() {
			return GetRuleContext<InnerfunctionBlockContext>(0);
		}
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_loopBlock);
		try {
			State = 142;
			switch (_input.La(1)) {
			case T__0:
			case T__3:
			case T__7:
			case T__14:
			case T__15:
			case T__16:
			case T__20:
			case T__26:
			case T__27:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; innerfunctionBlock();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; Match(T__8);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBlockContext : ParserRuleContext {
		public LocalConstVarAssignContext localConstVarAssign() {
			return GetRuleContext<LocalConstVarAssignContext>(0);
		}
		public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public ClassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterClassBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitClassBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBlockContext classBlock() {
		ClassBlockContext _localctx = new ClassBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classBlock);
		try {
			State = 147;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; localConstVarAssign();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; functionDecl();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146; classDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalConstVarAssignContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public LocalConstVarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localConstVarAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLocalConstVarAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLocalConstVarAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalConstVarAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalConstVarAssignContext localConstVarAssign() {
		LocalConstVarAssignContext _localctx = new LocalConstVarAssignContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_localConstVarAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(NAME);
			State = 150; Match(T__10);
			State = 151; constExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ClassBlockContext[] classBlock() {
			return GetRuleContexts<ClassBlockContext>();
		}
		public ClassBlockContext classBlock(int i) {
			return GetRuleContext<ClassBlockContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(T__11);
			State = 154; Match(NAME);
			State = 155; Match(T__12);
			State = 159;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__11 || _la==NAME) {
				{
				{
				State = 156; classBlock();
				}
				}
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 162; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public FunctionDefContext functionDef() {
			return GetRuleContext<FunctionDefContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; functionDef();
			State = 165; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext segmentBlock() {
			return GetRuleContext<SegmentBlockContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__14);
			State = 168; Match(T__4);
			State = 169; exp(0);
			State = 170; Match(T__5);
			State = 171; segmentBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext segmentBlock() {
			return GetRuleContext<SegmentBlockContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(T__15);
			State = 174; Match(T__4);
			State = 175; exp(0);
			State = 176; Match(T__5);
			State = 177; segmentBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopParseContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public SegmentBlockContext segmentBlock() {
			return GetRuleContext<SegmentBlockContext>(0);
		}
		public LoopParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopParse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoopParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoopParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopParseContext loopParse() {
		LoopParseContext _localctx = new LoopParseContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_loopParse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(T__16);
			State = 180; Match(T__4);
			State = 181; exp(0);
			State = 182; Match(T__17);
			State = 183; exp(0);
			State = 184; Match(T__5);
			State = 185; segmentBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopsContext : ParserRuleContext {
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public LoopParseContext loopParse() {
			return GetRuleContext<LoopParseContext>(0);
		}
		public LoopsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoops(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoops(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopsContext loops() {
		LoopsContext _localctx = new LoopsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_loops);
		try {
			State = 190;
			switch (_input.La(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; loop();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; whileLoop();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; loopParse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignContext : ParserRuleContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVarAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVarAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignContext varAssign() {
		VarAssignContext _localctx = new VarAssignContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_varAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; complexVariable();
			State = 193; Match(T__10);
			State = 194; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(NAME);
			State = 197; Match(T__4);
			State = 199;
			_la = _input.La(1);
			if (_la==T__19 || _la==NAME) {
				{
				State = 198; functionParameterList();
				}
			}

			State = 201; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterListContext : ParserRuleContext {
		public FunctionParameterNoDefaultContext[] functionParameterNoDefault() {
			return GetRuleContexts<FunctionParameterNoDefaultContext>();
		}
		public FunctionParameterNoDefaultContext functionParameterNoDefault(int i) {
			return GetRuleContext<FunctionParameterNoDefaultContext>(i);
		}
		public FunctionParameterDefaultContext[] functionParameterDefault() {
			return GetRuleContexts<FunctionParameterDefaultContext>();
		}
		public FunctionParameterDefaultContext functionParameterDefault(int i) {
			return GetRuleContext<FunctionParameterDefaultContext>(i);
		}
		public FunctionPrameterVariadicContext functionPrameterVariadic() {
			return GetRuleContext<FunctionPrameterVariadicContext>(0);
		}
		public FunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterListContext functionParameterList() {
		FunctionParameterListContext _localctx = new FunctionParameterListContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_functionParameterList);
		int _la;
		try {
			int _alt;
			State = 235;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; functionParameterNoDefault();
				State = 208;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 204; Match(T__17);
						State = 205; functionParameterNoDefault();
						}
						} 
					}
					State = 210;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				}
				State = 215;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 211; Match(T__17);
						State = 212; functionParameterDefault();
						}
						} 
					}
					State = 217;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				}
				State = 220;
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 218; Match(T__17);
					State = 219; functionPrameterVariadic();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222; functionParameterDefault();
				State = 227;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 223; Match(T__17);
						State = 224; functionParameterDefault();
						}
						} 
					}
					State = 229;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
				}
				State = 232;
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 230; Match(T__17);
					State = 231; functionPrameterVariadic();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234; functionPrameterVariadic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterDefaultContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public FunctionParameterDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterDefaultContext functionParameterDefault() {
		FunctionParameterDefaultContext _localctx = new FunctionParameterDefaultContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_functionParameterDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 237; @ref();
				}
			}

			State = 240; Match(NAME);
			State = 243;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 241; Match(T__10);
				State = 242; constExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterNoDefaultContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public FunctionParameterNoDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterNoDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterNoDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterNoDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterNoDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterNoDefaultContext functionParameterNoDefault() {
		FunctionParameterNoDefaultContext _localctx = new FunctionParameterNoDefaultContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_functionParameterNoDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 245; @ref();
				}
			}

			State = 248; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPrameterVariadicContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public VariadicContext variadic() {
			return GetRuleContext<VariadicContext>(0);
		}
		public FunctionPrameterVariadicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPrameterVariadic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionPrameterVariadic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionPrameterVariadic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrameterVariadic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPrameterVariadicContext functionPrameterVariadic() {
		FunctionPrameterVariadicContext _localctx = new FunctionPrameterVariadicContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_functionPrameterVariadic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(NAME);
			State = 251; variadic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariadicContext : ParserRuleContext {
		public VariadicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variadic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariadic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariadic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariadic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariadicContext variadic() {
		VariadicContext _localctx = new VariadicContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_variadic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefContext : ParserRuleContext {
		public RefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefContext @ref() {
		RefContext _localctx = new RefContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public InnerfunctionBlockContext[] innerfunctionBlock() {
			return GetRuleContexts<InnerfunctionBlockContext>();
		}
		public InnerfunctionBlockContext innerfunctionBlock(int i) {
			return GetRuleContext<InnerfunctionBlockContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(T__12);
			State = 261;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__7) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__20) | (1L << T__26) | (1L << T__27) | (1L << NAME))) != 0)) {
				{
				{
				State = 258; innerfunctionBlock();
				}
				}
				State = 263;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 264; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentBlockContext : ParserRuleContext {
		public LoopBlockContext[] loopBlock() {
			return GetRuleContexts<LoopBlockContext>();
		}
		public LoopBlockContext loopBlock(int i) {
			return GetRuleContext<LoopBlockContext>(i);
		}
		public SegmentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterSegmentBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitSegmentBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentBlockContext segmentBlock() {
		SegmentBlockContext _localctx = new SegmentBlockContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_segmentBlock);
		int _la;
		try {
			State = 275;
			switch (_input.La(1)) {
			case T__0:
			case T__3:
			case T__7:
			case T__8:
			case T__9:
			case T__14:
			case T__15:
			case T__16:
			case T__20:
			case T__26:
			case T__27:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266; loopBlock();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267; Match(T__12);
				State = 271;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__20) | (1L << T__26) | (1L << T__27) | (1L << NAME))) != 0)) {
					{
					{
					State = 268; loopBlock();
					}
					}
					State = 273;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 274; Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisContext : ParserRuleContext {
		public ThisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterThis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitThis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisContext @this() {
		ThisContext _localctx = new ThisContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_this);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexFunctionCallContext : ParserRuleContext {
		public VariableOrFunctionContext variableOrFunction() {
			return GetRuleContext<VariableOrFunctionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ThisContext @this() {
			return GetRuleContext<ThisContext>(0);
		}
		public ComplexFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexFunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterComplexFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitComplexFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexFunctionCallContext complexFunctionCall() {
		ComplexFunctionCallContext _localctx = new ComplexFunctionCallContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_complexFunctionCall);
		int _la;
		try {
			State = 294;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				_la = _input.La(1);
				if (_la==T__20) {
					{
					State = 279; @this();
					State = 280; Match(T__21);
					}
				}

				State = 284; variableOrFunction(0);
				State = 285; Match(T__21);
				State = 286; functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				_la = _input.La(1);
				if (_la==T__20) {
					{
					State = 288; @this();
					State = 289; Match(T__21);
					}
				}

				State = 293; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexVariableContext : ParserRuleContext {
		public VariableOrFunctionContext variableOrFunction() {
			return GetRuleContext<VariableOrFunctionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ThisContext @this() {
			return GetRuleContext<ThisContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ComplexVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterComplexVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitComplexVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexVariableContext complexVariable() {
		ComplexVariableContext _localctx = new ComplexVariableContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_complexVariable);
		int _la;
		try {
			State = 321;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				_la = _input.La(1);
				if (_la==T__20) {
					{
					State = 296; @this();
					State = 297; Match(T__21);
					}
				}

				State = 301; variableOrFunction(0);
				State = 302; Match(T__21);
				State = 303; var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				_la = _input.La(1);
				if (_la==T__20) {
					{
					State = 305; @this();
					State = 306; Match(T__21);
					}
				}

				State = 310; var();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314;
				_la = _input.La(1);
				if (_la==T__20) {
					{
					State = 311; @this();
					State = 312; Match(T__21);
					}
				}

				State = 316; variableOrFunction(0);
				State = 317; Match(T__22);
				State = 318; exp(0);
				State = 319; Match(T__23);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableOrFunctionContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public VariableOrFunctionContext[] variableOrFunction() {
			return GetRuleContexts<VariableOrFunctionContext>();
		}
		public VariableOrFunctionContext variableOrFunction(int i) {
			return GetRuleContext<VariableOrFunctionContext>(i);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VariableOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableOrFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableOrFunctionContext variableOrFunction() {
		return variableOrFunction(0);
	}

	private VariableOrFunctionContext variableOrFunction(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VariableOrFunctionContext _localctx = new VariableOrFunctionContext(_ctx, _parentState);
		VariableOrFunctionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_variableOrFunction, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 324; var();
				}
				break;

			case 2:
				{
				State = 325; functionCall();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 338;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 336;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
					case 1:
						{
						_localctx = new VariableOrFunctionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_variableOrFunction);
						State = 328;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 329; Match(T__21);
						State = 330; variableOrFunction(3);
						}
						break;

					case 2:
						{
						_localctx = new VariableOrFunctionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_variableOrFunction);
						State = 331;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 332; Match(T__22);
						State = 333; exp(0);
						State = 334; Match(T__23);
						}
						break;
					}
					} 
				}
				State = 340;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(NAME);
			State = 344; Match(T__4);
			State = 346;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__24) | (1L << T__26) | (1L << T__27) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << STRING) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 345; exp(0);
				}
			}

			State = 352;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__17) {
				{
				{
				State = 348; Match(T__17);
				State = 349; exp(0);
				}
				}
				State = 354;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 355; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNewInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNewInstance(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_newInstance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(T__24);
			State = 358; complexVariable();
			State = 359; Match(T__4);
			State = 361;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__24) | (1L << T__26) | (1L << T__27) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << STRING) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 360; exp(0);
				}
			}

			State = 367;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__17) {
				{
				{
				State = 363; Match(T__17);
				State = 364; exp(0);
				}
				}
				State = 369;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 370; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionFetchContext : ExpContext {
		public ComplexFunctionCallContext complexFunctionCall() {
			return GetRuleContext<ComplexFunctionCallContext>(0);
		}
		public FunctionFetchContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionFetch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryVarContext : ExpContext {
		public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public UnaryVarContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterUnaryVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitUnaryVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBitwiseContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpBitwiseContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpORContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public ExpORContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpOR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpOR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMulDivModContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public ExpMulDivModContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpContext : ExpContext {
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public ConstantExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterConstantExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitConstantExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableFetchContext : ExpContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public VariableFetchContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableFetch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignContext : ExpContext {
		public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		public VariableAssignContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpANDContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public ExpANDContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpAND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpAND(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAND(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpOpPowContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public ExpOpPowContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpOpPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpOpPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpOpPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryIncrDecrContext : ExpContext {
		public PrePostIncrDecrContext prePostIncrDecr() {
			return GetRuleContext<PrePostIncrDecrContext>(0);
		}
		public UnaryIncrDecrContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterUnaryIncrDecr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitUnaryIncrDecr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryIncrDecr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewClassObjectContext : ExpContext {
		public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		public NewClassObjectContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNewClassObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNewClassObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewClassObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCompareContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public ExpCompareContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpConcatContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExpConcatContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpAddSubContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 373; constExp();
				}
				break;

			case 2:
				{
				_localctx = new VariableFetchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 374; complexVariable();
				}
				break;

			case 3:
				{
				_localctx = new FunctionFetchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 375; complexFunctionCall();
				}
				break;

			case 4:
				{
				_localctx = new NewClassObjectContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 376; newInstance();
				}
				break;

			case 5:
				{
				_localctx = new VariableAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 377; varAssign();
				}
				break;

			case 6:
				{
				_localctx = new UnaryVarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 378; unaryOp();
				}
				break;

			case 7:
				{
				_localctx = new UnaryIncrDecrContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 379; prePostIncrDecr();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 415;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 413;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
					case 1:
						{
						_localctx = new ExpOpPowContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 382;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 383; operatorPower();
						State = 384; exp(8);
						}
						break;

					case 2:
						{
						_localctx = new ExpMulDivModContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 386;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 387; operatorMulDivMod();
						State = 388; exp(8);
						}
						break;

					case 3:
						{
						_localctx = new ExpAddSubContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 390;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 391; operatorAddSub();
						State = 392; exp(7);
						}
						break;

					case 4:
						{
						_localctx = new ExpConcatContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 394;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 395; Match(T__25);
						State = 396; exp(6);
						}
						break;

					case 5:
						{
						_localctx = new ExpCompareContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 397;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 398; operatorComparison();
						State = 399; exp(5);
						}
						break;

					case 6:
						{
						_localctx = new ExpBitwiseContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 401;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 402; operatorBitwise();
						State = 403; exp(4);
						}
						break;

					case 7:
						{
						_localctx = new ExpANDContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 405;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 406; operatorAnd();
						State = 407; exp(3);
						}
						break;

					case 8:
						{
						_localctx = new ExpORContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 409;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 410; operatorOr();
						State = 411; exp(2);
						}
						break;
					}
					} 
				}
				State = 417;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(MosesParser.NUMBER, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_unaryOp);
		try {
			State = 424;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; operatorUnary();
				State = 419; complexVariable();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421; operatorUnary();
				State = 422; Match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpContext : ParserRuleContext {
		public ConstExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExp; } }
	 
		public ConstExpContext() { }
		public virtual void CopyFrom(ConstExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : ConstExpContext {
		public ITerminalNode NUMBER() { return GetToken(MosesParser.NUMBER, 0); }
		public NumberContext(ConstExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ConstExpContext {
		public ITerminalNode STRING() { return GetToken(MosesParser.STRING, 0); }
		public StringContext(ConstExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpContext constExp() {
		ConstExpContext _localctx = new ConstExpContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_constExp);
		try {
			State = 428;
			switch (_input.La(1)) {
			case NUMBER:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrePostIncrDecrContext : ParserRuleContext {
		public PreIncrDecrContext preIncrDecr() {
			return GetRuleContext<PreIncrDecrContext>(0);
		}
		public PostIncrDecrContext postIncrDecr() {
			return GetRuleContext<PostIncrDecrContext>(0);
		}
		public PrePostIncrDecrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prePostIncrDecr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterPrePostIncrDecr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitPrePostIncrDecr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrePostIncrDecr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrePostIncrDecrContext prePostIncrDecr() {
		PrePostIncrDecrContext _localctx = new PrePostIncrDecrContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_prePostIncrDecr);
		try {
			State = 432;
			switch (_input.La(1)) {
			case T__26:
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430; preIncrDecr();
				}
				break;
			case T__20:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; postIncrDecr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrDecrContext : ParserRuleContext {
		public IncrDecrContext incrDecr() {
			return GetRuleContext<IncrDecrContext>(0);
		}
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public PreIncrDecrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrDecr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterPreIncrDecr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitPreIncrDecr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrDecr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrDecrContext preIncrDecr() {
		PreIncrDecrContext _localctx = new PreIncrDecrContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_preIncrDecr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; incrDecr();
			State = 435; complexVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrDecrContext : ParserRuleContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public IncrDecrContext incrDecr() {
			return GetRuleContext<IncrDecrContext>(0);
		}
		public PostIncrDecrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrDecr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterPostIncrDecr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitPostIncrDecr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrDecr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrDecrContext postIncrDecr() {
		PostIncrDecrContext _localctx = new PostIncrDecrContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_postIncrDecr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; complexVariable();
			State = 438; incrDecr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrDecrContext : ParserRuleContext {
		public IncrDecrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrDecr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterIncrDecr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitIncrDecr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrDecr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrDecrContext incrDecr() {
		IncrDecrContext _localctx = new IncrDecrContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_incrDecr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			_la = _input.La(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			_la = _input.La(1);
			if ( !(_la==T__37 || _la==T__38) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__41) | (1L << T__42) | (1L << T__43))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return variableOrFunction_sempred((VariableOrFunctionContext)_localctx, predIndex);

		case 32: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool variableOrFunction_sempred(VariableOrFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 8);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 5);

		case 6: return Precpred(_ctx, 4);

		case 7: return Precpred(_ctx, 3);

		case 8: return Precpred(_ctx, 2);

		case 9: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3<\x1CD\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x3\x2\a\x2\x62\n\x2"+
		"\f\x2\xE\x2\x65\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3l\n\x3\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4u\n\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x5\x5}\n\x5\x5\x5\x7F\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x5\x6\x88\n\x6\x3\a\x3\a\x5\a\x8C\n\a\x3\b\x3\b\x3\b\x5\b"+
		"\x91\n\b\x3\t\x3\t\x3\t\x5\t\x96\n\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3"+
		"\v\x3\v\a\v\xA0\n\v\f\v\xE\v\xA3\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10\xC1\n"+
		"\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x5\x12\xCA\n\x12"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\a\x13\xD1\n\x13\f\x13\xE\x13\xD4\v"+
		"\x13\x3\x13\x3\x13\a\x13\xD8\n\x13\f\x13\xE\x13\xDB\v\x13\x3\x13\x3\x13"+
		"\x5\x13\xDF\n\x13\x3\x13\x3\x13\x3\x13\a\x13\xE4\n\x13\f\x13\xE\x13\xE7"+
		"\v\x13\x3\x13\x3\x13\x5\x13\xEB\n\x13\x3\x13\x5\x13\xEE\n\x13\x3\x14\x5"+
		"\x14\xF1\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\xF6\n\x14\x3\x15\x5\x15\xF9"+
		"\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\a\x19\x106\n\x19\f\x19\xE\x19\x109\v\x19\x3\x19\x3\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\a\x1A\x110\n\x1A\f\x1A\xE\x1A\x113\v\x1A\x3\x1A"+
		"\x5\x1A\x116\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x11D\n\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x126\n\x1C\x3"+
		"\x1C\x5\x1C\x129\n\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x12E\n\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x137\n\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\x13D\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x144\n\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x149\n\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x153\n\x1E\f\x1E\xE\x1E"+
		"\x156\v\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x5 \x15D\n \x3 \x3 \a \x161\n \f"+
		" \xE \x164\v \x3 \x3 \x3!\x3!\x3!\x3!\x5!\x16C\n!\x3!\x3!\a!\x170\n!\f"+
		"!\xE!\x173\v!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x17F"+
		"\n\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\a\"\x1A0\n\"\f\"\xE\"\x1A3\v\"\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x5#\x1AB\n#\x3$\x3$\x5$\x1AF\n$\x3%\x3%\x5%\x1B3\n%\x3&\x3&\x3&"+
		"\x3\'\x3\'\x3\'\x3(\x3(\x3)\x3)\x3*\x3*\x3+\x3+\x3,\x3,\x3-\x3-\x3.\x3"+
		".\x3/\x3/\x3\x30\x3\x30\x3\x30\x2\x2\x4:\x42\x31\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2\x2\b\x3\x2\x1D\x1E\x3\x2!&\x3\x2(+\x3\x2()\x4\x2\x15"+
		"\x15,.\x3\x2/\x33\x1DF\x2\x63\x3\x2\x2\x2\x4k\x3\x2\x2\x2\x6t\x3\x2\x2"+
		"\x2\bv\x3\x2\x2\x2\n\x80\x3\x2\x2\x2\f\x89\x3\x2\x2\x2\xE\x90\x3\x2\x2"+
		"\x2\x10\x95\x3\x2\x2\x2\x12\x97\x3\x2\x2\x2\x14\x9B\x3\x2\x2\x2\x16\xA6"+
		"\x3\x2\x2\x2\x18\xA9\x3\x2\x2\x2\x1A\xAF\x3\x2\x2\x2\x1C\xB5\x3\x2\x2"+
		"\x2\x1E\xC0\x3\x2\x2\x2 \xC2\x3\x2\x2\x2\"\xC6\x3\x2\x2\x2$\xED\x3\x2"+
		"\x2\x2&\xF0\x3\x2\x2\x2(\xF8\x3\x2\x2\x2*\xFC\x3\x2\x2\x2,\xFF\x3\x2\x2"+
		"\x2.\x101\x3\x2\x2\x2\x30\x103\x3\x2\x2\x2\x32\x115\x3\x2\x2\x2\x34\x117"+
		"\x3\x2\x2\x2\x36\x128\x3\x2\x2\x2\x38\x143\x3\x2\x2\x2:\x148\x3\x2\x2"+
		"\x2<\x157\x3\x2\x2\x2>\x159\x3\x2\x2\x2@\x167\x3\x2\x2\x2\x42\x17E\x3"+
		"\x2\x2\x2\x44\x1AA\x3\x2\x2\x2\x46\x1AE\x3\x2\x2\x2H\x1B2\x3\x2\x2\x2"+
		"J\x1B4\x3\x2\x2\x2L\x1B7\x3\x2\x2\x2N\x1BA\x3\x2\x2\x2P\x1BC\x3\x2\x2"+
		"\x2R\x1BE\x3\x2\x2\x2T\x1C0\x3\x2\x2\x2V\x1C2\x3\x2\x2\x2X\x1C4\x3\x2"+
		"\x2\x2Z\x1C6\x3\x2\x2\x2\\\x1C8\x3\x2\x2\x2^\x1CA\x3\x2\x2\x2`\x62\x5"+
		"\x4\x3\x2\x61`\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63"+
		"\x64\x3\x2\x2\x2\x64\x66\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66g\a\x2\x2"+
		"\x3g\x3\x3\x2\x2\x2hl\x5\x6\x4\x2il\x5\x16\f\x2jl\x5\x14\v\x2kh\x3\x2"+
		"\x2\x2ki\x3\x2\x2\x2kj\x3\x2\x2\x2l\x5\x3\x2\x2\x2mu\x5 \x11\x2nu\x5\x36"+
		"\x1C\x2ou\x5\x1E\x10\x2pu\x5\n\x6\x2qu\x5\f\a\x2ru\x5H%\x2su\x5\b\x5\x2"+
		"tm\x3\x2\x2\x2tn\x3\x2\x2\x2to\x3\x2\x2\x2tp\x3\x2\x2\x2tq\x3\x2\x2\x2"+
		"tr\x3\x2\x2\x2ts\x3\x2\x2\x2u\a\x3\x2\x2\x2vw\a\x3\x2\x2w~\x5\x32\x1A"+
		"\x2xy\a\x4\x2\x2y|\x5\x32\x1A\x2z{\a\x5\x2\x2{}\x5\x32\x1A\x2|z\x3\x2"+
		"\x2\x2|}\x3\x2\x2\x2}\x7F\x3\x2\x2\x2~x\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F"+
		"\t\x3\x2\x2\x2\x80\x81\a\x6\x2\x2\x81\x82\a\a\x2\x2\x82\x83\x5\x42\"\x2"+
		"\x83\x84\a\b\x2\x2\x84\x87\x5\x32\x1A\x2\x85\x86\a\t\x2\x2\x86\x88\x5"+
		"\x32\x1A\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\v\x3\x2\x2\x2"+
		"\x89\x8B\a\n\x2\x2\x8A\x8C\x5\x42\"\x2\x8B\x8A\x3\x2\x2\x2\x8B\x8C\x3"+
		"\x2\x2\x2\x8C\r\x3\x2\x2\x2\x8D\x91\x5\x6\x4\x2\x8E\x91\a\v\x2\x2\x8F"+
		"\x91\a\f\x2\x2\x90\x8D\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x90\x8F\x3\x2\x2"+
		"\x2\x91\xF\x3\x2\x2\x2\x92\x96\x5\x12\n\x2\x93\x96\x5\x16\f\x2\x94\x96"+
		"\x5\x14\v\x2\x95\x92\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x94\x3\x2\x2"+
		"\x2\x96\x11\x3\x2\x2\x2\x97\x98\a\x35\x2\x2\x98\x99\a\r\x2\x2\x99\x9A"+
		"\x5\x46$\x2\x9A\x13\x3\x2\x2\x2\x9B\x9C\a\xE\x2\x2\x9C\x9D\a\x35\x2\x2"+
		"\x9D\xA1\a\xF\x2\x2\x9E\xA0\x5\x10\t\x2\x9F\x9E\x3\x2\x2\x2\xA0\xA3\x3"+
		"\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3\x2\x2\x2"+
		"\xA3\xA1\x3\x2\x2\x2\xA4\xA5\a\x10\x2\x2\xA5\x15\x3\x2\x2\x2\xA6\xA7\x5"+
		"\"\x12\x2\xA7\xA8\x5\x30\x19\x2\xA8\x17\x3\x2\x2\x2\xA9\xAA\a\x11\x2\x2"+
		"\xAA\xAB\a\a\x2\x2\xAB\xAC\x5\x42\"\x2\xAC\xAD\a\b\x2\x2\xAD\xAE\x5\x32"+
		"\x1A\x2\xAE\x19\x3\x2\x2\x2\xAF\xB0\a\x12\x2\x2\xB0\xB1\a\a\x2\x2\xB1"+
		"\xB2\x5\x42\"\x2\xB2\xB3\a\b\x2\x2\xB3\xB4\x5\x32\x1A\x2\xB4\x1B\x3\x2"+
		"\x2\x2\xB5\xB6\a\x13\x2\x2\xB6\xB7\a\a\x2\x2\xB7\xB8\x5\x42\"\x2\xB8\xB9"+
		"\a\x14\x2\x2\xB9\xBA\x5\x42\"\x2\xBA\xBB\a\b\x2\x2\xBB\xBC\x5\x32\x1A"+
		"\x2\xBC\x1D\x3\x2\x2\x2\xBD\xC1\x5\x1A\xE\x2\xBE\xC1\x5\x18\r\x2\xBF\xC1"+
		"\x5\x1C\xF\x2\xC0\xBD\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xBF\x3\x2\x2"+
		"\x2\xC1\x1F\x3\x2\x2\x2\xC2\xC3\x5\x38\x1D\x2\xC3\xC4\a\r\x2\x2\xC4\xC5"+
		"\x5\x42\"\x2\xC5!\x3\x2\x2\x2\xC6\xC7\a\x35\x2\x2\xC7\xC9\a\a\x2\x2\xC8"+
		"\xCA\x5$\x13\x2\xC9\xC8\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB\x3\x2"+
		"\x2\x2\xCB\xCC\a\b\x2\x2\xCC#\x3\x2\x2\x2\xCD\xD2\x5(\x15\x2\xCE\xCF\a"+
		"\x14\x2\x2\xCF\xD1\x5(\x15\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD4\x3\x2\x2\x2"+
		"\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD9\x3\x2\x2\x2\xD4\xD2\x3"+
		"\x2\x2\x2\xD5\xD6\a\x14\x2\x2\xD6\xD8\x5&\x14\x2\xD7\xD5\x3\x2\x2\x2\xD8"+
		"\xDB\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDE\x3\x2"+
		"\x2\x2\xDB\xD9\x3\x2\x2\x2\xDC\xDD\a\x14\x2\x2\xDD\xDF\x5*\x16\x2\xDE"+
		"\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xEE\x3\x2\x2\x2\xE0\xE5\x5&\x14"+
		"\x2\xE1\xE2\a\x14\x2\x2\xE2\xE4\x5&\x14\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE7"+
		"\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xEA\x3\x2\x2"+
		"\x2\xE7\xE5\x3\x2\x2\x2\xE8\xE9\a\x14\x2\x2\xE9\xEB\x5*\x16\x2\xEA\xE8"+
		"\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xEE\x5*\x16\x2"+
		"\xED\xCD\x3\x2\x2\x2\xED\xE0\x3\x2\x2\x2\xED\xEC\x3\x2\x2\x2\xEE%\x3\x2"+
		"\x2\x2\xEF\xF1\x5.\x18\x2\xF0\xEF\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1"+
		"\xF2\x3\x2\x2\x2\xF2\xF5\a\x35\x2\x2\xF3\xF4\a\r\x2\x2\xF4\xF6\x5\x46"+
		"$\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\'\x3\x2\x2\x2\xF7\xF9"+
		"\x5.\x18\x2\xF8\xF7\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2"+
		"\xFA\xFB\a\x35\x2\x2\xFB)\x3\x2\x2\x2\xFC\xFD\a\x35\x2\x2\xFD\xFE\x5,"+
		"\x17\x2\xFE+\x3\x2\x2\x2\xFF\x100\a\x15\x2\x2\x100-\x3\x2\x2\x2\x101\x102"+
		"\a\x16\x2\x2\x102/\x3\x2\x2\x2\x103\x107\a\xF\x2\x2\x104\x106\x5\x6\x4"+
		"\x2\x105\x104\x3\x2\x2\x2\x106\x109\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2"+
		"\x107\x108\x3\x2\x2\x2\x108\x10A\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x10A"+
		"\x10B\a\x10\x2\x2\x10B\x31\x3\x2\x2\x2\x10C\x116\x5\xE\b\x2\x10D\x111"+
		"\a\xF\x2\x2\x10E\x110\x5\xE\b\x2\x10F\x10E\x3\x2\x2\x2\x110\x113\x3\x2"+
		"\x2\x2\x111\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x114\x3\x2\x2"+
		"\x2\x113\x111\x3\x2\x2\x2\x114\x116\a\x10\x2\x2\x115\x10C\x3\x2\x2\x2"+
		"\x115\x10D\x3\x2\x2\x2\x116\x33\x3\x2\x2\x2\x117\x118\a\x17\x2\x2\x118"+
		"\x35\x3\x2\x2\x2\x119\x11A\x5\x34\x1B\x2\x11A\x11B\a\x18\x2\x2\x11B\x11D"+
		"\x3\x2\x2\x2\x11C\x119\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11E\x3"+
		"\x2\x2\x2\x11E\x11F\x5:\x1E\x2\x11F\x120\a\x18\x2\x2\x120\x121\x5> \x2"+
		"\x121\x129\x3\x2\x2\x2\x122\x123\x5\x34\x1B\x2\x123\x124\a\x18\x2\x2\x124"+
		"\x126\x3\x2\x2\x2\x125\x122\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x127"+
		"\x3\x2\x2\x2\x127\x129\x5> \x2\x128\x11C\x3\x2\x2\x2\x128\x125\x3\x2\x2"+
		"\x2\x129\x37\x3\x2\x2\x2\x12A\x12B\x5\x34\x1B\x2\x12B\x12C\a\x18\x2\x2"+
		"\x12C\x12E\x3\x2\x2\x2\x12D\x12A\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E"+
		"\x12F\x3\x2\x2\x2\x12F\x130\x5:\x1E\x2\x130\x131\a\x18\x2\x2\x131\x132"+
		"\x5<\x1F\x2\x132\x144\x3\x2\x2\x2\x133\x134\x5\x34\x1B\x2\x134\x135\a"+
		"\x18\x2\x2\x135\x137\x3\x2\x2\x2\x136\x133\x3\x2\x2\x2\x136\x137\x3\x2"+
		"\x2\x2\x137\x138\x3\x2\x2\x2\x138\x144\x5<\x1F\x2\x139\x13A\x5\x34\x1B"+
		"\x2\x13A\x13B\a\x18\x2\x2\x13B\x13D\x3\x2\x2\x2\x13C\x139\x3\x2\x2\x2"+
		"\x13C\x13D\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x5:\x1E\x2\x13F"+
		"\x140\a\x19\x2\x2\x140\x141\x5\x42\"\x2\x141\x142\a\x1A\x2\x2\x142\x144"+
		"\x3\x2\x2\x2\x143\x12D\x3\x2\x2\x2\x143\x136\x3\x2\x2\x2\x143\x13C\x3"+
		"\x2\x2\x2\x144\x39\x3\x2\x2\x2\x145\x146\b\x1E\x1\x2\x146\x149\x5<\x1F"+
		"\x2\x147\x149\x5> \x2\x148\x145\x3\x2\x2\x2\x148\x147\x3\x2\x2\x2\x149"+
		"\x154\x3\x2\x2\x2\x14A\x14B\f\x4\x2\x2\x14B\x14C\a\x18\x2\x2\x14C\x153"+
		"\x5:\x1E\x5\x14D\x14E\f\x3\x2\x2\x14E\x14F\a\x19\x2\x2\x14F\x150\x5\x42"+
		"\"\x2\x150\x151\a\x1A\x2\x2\x151\x153\x3\x2\x2\x2\x152\x14A\x3\x2\x2\x2"+
		"\x152\x14D\x3\x2\x2\x2\x153\x156\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x154"+
		"\x155\x3\x2\x2\x2\x155;\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x157\x158\a"+
		"\x35\x2\x2\x158=\x3\x2\x2\x2\x159\x15A\a\x35\x2\x2\x15A\x15C\a\a\x2\x2"+
		"\x15B\x15D\x5\x42\"\x2\x15C\x15B\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D"+
		"\x162\x3\x2\x2\x2\x15E\x15F\a\x14\x2\x2\x15F\x161\x5\x42\"\x2\x160\x15E"+
		"\x3\x2\x2\x2\x161\x164\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3"+
		"\x2\x2\x2\x163\x165\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x165\x166\a\b\x2"+
		"\x2\x166?\x3\x2\x2\x2\x167\x168\a\x1B\x2\x2\x168\x169\x5\x38\x1D\x2\x169"+
		"\x16B\a\a\x2\x2\x16A\x16C\x5\x42\"\x2\x16B\x16A\x3\x2\x2\x2\x16B\x16C"+
		"\x3\x2\x2\x2\x16C\x171\x3\x2\x2\x2\x16D\x16E\a\x14\x2\x2\x16E\x170\x5"+
		"\x42\"\x2\x16F\x16D\x3\x2\x2\x2\x170\x173\x3\x2\x2\x2\x171\x16F\x3\x2"+
		"\x2\x2\x171\x172\x3\x2\x2\x2\x172\x174\x3\x2\x2\x2\x173\x171\x3\x2\x2"+
		"\x2\x174\x175\a\b\x2\x2\x175\x41\x3\x2\x2\x2\x176\x177\b\"\x1\x2\x177"+
		"\x17F\x5\x46$\x2\x178\x17F\x5\x38\x1D\x2\x179\x17F\x5\x36\x1C\x2\x17A"+
		"\x17F\x5@!\x2\x17B\x17F\x5 \x11\x2\x17C\x17F\x5\x44#\x2\x17D\x17F\x5H"+
		"%\x2\x17E\x176\x3\x2\x2\x2\x17E\x178\x3\x2\x2\x2\x17E\x179\x3\x2\x2\x2"+
		"\x17E\x17A\x3\x2\x2\x2\x17E\x17B\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17E"+
		"\x17D\x3\x2\x2\x2\x17F\x1A1\x3\x2\x2\x2\x180\x181\f\n\x2\x2\x181\x182"+
		"\x5V,\x2\x182\x183\x5\x42\"\n\x183\x1A0\x3\x2\x2\x2\x184\x185\f\t\x2\x2"+
		"\x185\x186\x5\\/\x2\x186\x187\x5\x42\"\n\x187\x1A0\x3\x2\x2\x2\x188\x189"+
		"\f\b\x2\x2\x189\x18A\x5Z.\x2\x18A\x18B\x5\x42\"\t\x18B\x1A0\x3\x2\x2\x2"+
		"\x18C\x18D\f\a\x2\x2\x18D\x18E\a\x1C\x2\x2\x18E\x1A0\x5\x42\"\b\x18F\x190"+
		"\f\x6\x2\x2\x190\x191\x5T+\x2\x191\x192\x5\x42\"\a\x192\x1A0\x3\x2\x2"+
		"\x2\x193\x194\f\x5\x2\x2\x194\x195\x5^\x30\x2\x195\x196\x5\x42\"\x6\x196"+
		"\x1A0\x3\x2\x2\x2\x197\x198\f\x4\x2\x2\x198\x199\x5R*\x2\x199\x19A\x5"+
		"\x42\"\x5\x19A\x1A0\x3\x2\x2\x2\x19B\x19C\f\x3\x2\x2\x19C\x19D\x5P)\x2"+
		"\x19D\x19E\x5\x42\"\x4\x19E\x1A0\x3\x2\x2\x2\x19F\x180\x3\x2\x2\x2\x19F"+
		"\x184\x3\x2\x2\x2\x19F\x188\x3\x2\x2\x2\x19F\x18C\x3\x2\x2\x2\x19F\x18F"+
		"\x3\x2\x2\x2\x19F\x193\x3\x2\x2\x2\x19F\x197\x3\x2\x2\x2\x19F\x19B\x3"+
		"\x2\x2\x2\x1A0\x1A3\x3\x2\x2\x2\x1A1\x19F\x3\x2\x2\x2\x1A1\x1A2\x3\x2"+
		"\x2\x2\x1A2\x43\x3\x2\x2\x2\x1A3\x1A1\x3\x2\x2\x2\x1A4\x1A5\x5X-\x2\x1A5"+
		"\x1A6\x5\x38\x1D\x2\x1A6\x1AB\x3\x2\x2\x2\x1A7\x1A8\x5X-\x2\x1A8\x1A9"+
		"\a\x36\x2\x2\x1A9\x1AB\x3\x2\x2\x2\x1AA\x1A4\x3\x2\x2\x2\x1AA\x1A7\x3"+
		"\x2\x2\x2\x1AB\x45\x3\x2\x2\x2\x1AC\x1AF\a\x36\x2\x2\x1AD\x1AF\a\x34\x2"+
		"\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AD\x3\x2\x2\x2\x1AFG\x3\x2\x2\x2\x1B0"+
		"\x1B3\x5J&\x2\x1B1\x1B3\x5L\'\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B1\x3\x2"+
		"\x2\x2\x1B3I\x3\x2\x2\x2\x1B4\x1B5\x5N(\x2\x1B5\x1B6\x5\x38\x1D\x2\x1B6"+
		"K\x3\x2\x2\x2\x1B7\x1B8\x5\x38\x1D\x2\x1B8\x1B9\x5N(\x2\x1B9M\x3\x2\x2"+
		"\x2\x1BA\x1BB\t\x2\x2\x2\x1BBO\x3\x2\x2\x2\x1BC\x1BD\a\x1F\x2\x2\x1BD"+
		"Q\x3\x2\x2\x2\x1BE\x1BF\a \x2\x2\x1BFS\x3\x2\x2\x2\x1C0\x1C1\t\x3\x2\x2"+
		"\x1C1U\x3\x2\x2\x2\x1C2\x1C3\a\'\x2\x2\x1C3W\x3\x2\x2\x2\x1C4\x1C5\t\x4"+
		"\x2\x2\x1C5Y\x3\x2\x2\x2\x1C6\x1C7\t\x5\x2\x2\x1C7[\x3\x2\x2\x2\x1C8\x1C9"+
		"\t\x6\x2\x2\x1C9]\x3\x2\x2\x2\x1CA\x1CB\t\a\x2\x2\x1CB_\x3\x2\x2\x2.\x63"+
		"kt|~\x87\x8B\x90\x95\xA1\xC0\xC9\xD2\xD9\xDE\xE5\xEA\xED\xF0\xF5\xF8\x107"+
		"\x111\x115\x11C\x125\x128\x12D\x136\x13C\x143\x148\x152\x154\x15C\x162"+
		"\x16B\x171\x17E\x19F\x1A1\x1AA\x1AE\x1B2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MOSES
