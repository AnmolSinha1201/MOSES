//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Nick\Documents\Visual Studio 2015\Projects\MOSES\Moses.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MOSES {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MosesParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, STRING=43, NAME=44, NUMBER=45, 
		INT=46, HEX=47, FLOAT=48, Digit=49, WS=50, NL=51;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_innerfunctionBlock = 2, RULE_returnBlock = 3, 
		RULE_loopBlock = 4, RULE_classBlock = 5, RULE_localConstVarAssign = 6, 
		RULE_classDecl = 7, RULE_functionDecl = 8, RULE_whileLoop = 9, RULE_loop = 10, 
		RULE_loops = 11, RULE_varAssign = 12, RULE_functionDef = 13, RULE_functionParameterList = 14, 
		RULE_functionParameterDefault = 15, RULE_functionParameterNoDefault = 16, 
		RULE_functionPrameterVariadic = 17, RULE_variadic = 18, RULE_ref = 19, 
		RULE_functionBody = 20, RULE_segmentBlock = 21, RULE_this = 22, RULE_complexFunctionCall = 23, 
		RULE_complexVariable = 24, RULE_variableOrFunction = 25, RULE_var = 26, 
		RULE_functionCall = 27, RULE_newInstance = 28, RULE_exp = 29, RULE_constExp = 30, 
		RULE_operatorOr = 31, RULE_operatorAnd = 32, RULE_operatorComparison = 33, 
		RULE_operatorPower = 34, RULE_operatorUnary = 35, RULE_operatorAddSub = 36, 
		RULE_operatorMulDivMod = 37, RULE_operatorBitwise = 38;
	public static readonly string[] ruleNames = {
		"chunk", "block", "innerfunctionBlock", "returnBlock", "loopBlock", "classBlock", 
		"localConstVarAssign", "classDecl", "functionDecl", "whileLoop", "loop", 
		"loops", "varAssign", "functionDef", "functionParameterList", "functionParameterDefault", 
		"functionParameterNoDefault", "functionPrameterVariadic", "variadic", 
		"ref", "functionBody", "segmentBlock", "this", "complexFunctionCall", 
		"complexVariable", "variableOrFunction", "var", "functionCall", "newInstance", 
		"exp", "constExp", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorPower", "operatorUnary", "operatorAddSub", "operatorMulDivMod", 
		"operatorBitwise"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'('", "')'", "'else'", "'return'", "'break'", "'continue'", 
		"'='", "'class'", "'{'", "'}'", "'while'", "'loop'", "','", "'*'", "'ref'", 
		"'this'", "'.'", "'['", "']'", "'new'", "' . '", "'||'", "'&&'", "'<'", 
		"'>'", "'<='", "'>='", "'!='", "'=='", "'^'", "'+'", "'-'", "'!'", "'~'", 
		"'/'", "'%'", "'//'", "'&'", "'|'", "'<<'", "'>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "STRING", "NAME", "NUMBER", 
		"INT", "HEX", "FLOAT", "Digit", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Moses.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MosesParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MosesParser.Eof, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__16) | (1L << NAME))) != 0)) {
				{
				{
				State = 78; block();
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 84; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public InnerfunctionBlockContext innerfunctionBlock() {
			return GetRuleContext<InnerfunctionBlockContext>(0);
		}
		public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			State = 89;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; innerfunctionBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; functionDecl();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; classDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerfunctionBlockContext : ParserRuleContext {
		public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		public ComplexFunctionCallContext complexFunctionCall() {
			return GetRuleContext<ComplexFunctionCallContext>(0);
		}
		public LoopsContext loops() {
			return GetRuleContext<LoopsContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext[] segmentBlock() {
			return GetRuleContexts<SegmentBlockContext>();
		}
		public SegmentBlockContext segmentBlock(int i) {
			return GetRuleContext<SegmentBlockContext>(i);
		}
		public ReturnBlockContext returnBlock() {
			return GetRuleContext<ReturnBlockContext>(0);
		}
		public InnerfunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerfunctionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterInnerfunctionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitInnerfunctionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerfunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerfunctionBlockContext innerfunctionBlock() {
		InnerfunctionBlockContext _localctx = new InnerfunctionBlockContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_innerfunctionBlock);
		try {
			State = 104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; varAssign();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; complexFunctionCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93; loops();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94; Match(T__0);
				State = 95; Match(T__1);
				State = 96; exp(0);
				State = 97; Match(T__2);
				State = 98; segmentBlock();
				State = 101;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					State = 99; Match(T__3);
					State = 100; segmentBlock();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 103; returnBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnBlockContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ReturnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterReturnBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitReturnBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnBlockContext returnBlock() {
		ReturnBlockContext _localctx = new ReturnBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_returnBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(T__4);
			State = 108;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 107; exp(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		public InnerfunctionBlockContext innerfunctionBlock() {
			return GetRuleContext<InnerfunctionBlockContext>(0);
		}
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_loopBlock);
		try {
			State = 113;
			switch (_input.La(1)) {
			case T__0:
			case T__4:
			case T__11:
			case T__12:
			case T__16:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; innerfunctionBlock();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(T__5);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBlockContext : ParserRuleContext {
		public LocalConstVarAssignContext localConstVarAssign() {
			return GetRuleContext<LocalConstVarAssignContext>(0);
		}
		public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public ClassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterClassBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitClassBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBlockContext classBlock() {
		ClassBlockContext _localctx = new ClassBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classBlock);
		try {
			State = 118;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; localConstVarAssign();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; functionDecl();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117; classDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalConstVarAssignContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public LocalConstVarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localConstVarAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLocalConstVarAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLocalConstVarAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalConstVarAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalConstVarAssignContext localConstVarAssign() {
		LocalConstVarAssignContext _localctx = new LocalConstVarAssignContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_localConstVarAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(NAME);
			State = 121; Match(T__7);
			State = 122; constExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ClassBlockContext[] classBlock() {
			return GetRuleContexts<ClassBlockContext>();
		}
		public ClassBlockContext classBlock(int i) {
			return GetRuleContext<ClassBlockContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(T__8);
			State = 125; Match(NAME);
			State = 126; Match(T__9);
			State = 130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8 || _la==NAME) {
				{
				{
				State = 127; classBlock();
				}
				}
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 133; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public FunctionDefContext functionDef() {
			return GetRuleContext<FunctionDefContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; functionDef();
			State = 136; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext segmentBlock() {
			return GetRuleContext<SegmentBlockContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(T__11);
			State = 139; Match(T__1);
			State = 140; exp(0);
			State = 141; Match(T__2);
			State = 142; segmentBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext segmentBlock() {
			return GetRuleContext<SegmentBlockContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(T__12);
			State = 145; Match(T__1);
			State = 146; exp(0);
			State = 147; Match(T__2);
			State = 148; segmentBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopsContext : ParserRuleContext {
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public LoopsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoops(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoops(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopsContext loops() {
		LoopsContext _localctx = new LoopsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_loops);
		try {
			State = 152;
			switch (_input.La(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; loop();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; whileLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignContext : ParserRuleContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVarAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVarAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignContext varAssign() {
		VarAssignContext _localctx = new VarAssignContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_varAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; complexVariable();
			State = 155; Match(T__7);
			State = 156; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(NAME);
			State = 159; Match(T__1);
			State = 161;
			_la = _input.La(1);
			if (_la==T__15 || _la==NAME) {
				{
				State = 160; functionParameterList();
				}
			}

			State = 163; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterListContext : ParserRuleContext {
		public FunctionParameterNoDefaultContext[] functionParameterNoDefault() {
			return GetRuleContexts<FunctionParameterNoDefaultContext>();
		}
		public FunctionParameterNoDefaultContext functionParameterNoDefault(int i) {
			return GetRuleContext<FunctionParameterNoDefaultContext>(i);
		}
		public FunctionParameterDefaultContext[] functionParameterDefault() {
			return GetRuleContexts<FunctionParameterDefaultContext>();
		}
		public FunctionParameterDefaultContext functionParameterDefault(int i) {
			return GetRuleContext<FunctionParameterDefaultContext>(i);
		}
		public FunctionPrameterVariadicContext functionPrameterVariadic() {
			return GetRuleContext<FunctionPrameterVariadicContext>(0);
		}
		public FunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterListContext functionParameterList() {
		FunctionParameterListContext _localctx = new FunctionParameterListContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_functionParameterList);
		int _la;
		try {
			int _alt;
			State = 197;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; functionParameterNoDefault();
				State = 170;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 166; Match(T__13);
						State = 167; functionParameterNoDefault();
						}
						} 
					}
					State = 172;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				}
				State = 177;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 173; Match(T__13);
						State = 174; functionParameterDefault();
						}
						} 
					}
					State = 179;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				}
				State = 182;
				_la = _input.La(1);
				if (_la==T__13) {
					{
					State = 180; Match(T__13);
					State = 181; functionPrameterVariadic();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; functionParameterDefault();
				State = 189;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 185; Match(T__13);
						State = 186; functionParameterDefault();
						}
						} 
					}
					State = 191;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				}
				State = 194;
				_la = _input.La(1);
				if (_la==T__13) {
					{
					State = 192; Match(T__13);
					State = 193; functionPrameterVariadic();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196; functionPrameterVariadic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterDefaultContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public FunctionParameterDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterDefaultContext functionParameterDefault() {
		FunctionParameterDefaultContext _localctx = new FunctionParameterDefaultContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_functionParameterDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = _input.La(1);
			if (_la==T__15) {
				{
				State = 199; @ref();
				}
			}

			State = 202; Match(NAME);
			State = 205;
			_la = _input.La(1);
			if (_la==T__7) {
				{
				State = 203; Match(T__7);
				State = 204; constExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterNoDefaultContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public FunctionParameterNoDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterNoDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterNoDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterNoDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterNoDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterNoDefaultContext functionParameterNoDefault() {
		FunctionParameterNoDefaultContext _localctx = new FunctionParameterNoDefaultContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_functionParameterNoDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = _input.La(1);
			if (_la==T__15) {
				{
				State = 207; @ref();
				}
			}

			State = 210; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPrameterVariadicContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public VariadicContext variadic() {
			return GetRuleContext<VariadicContext>(0);
		}
		public FunctionPrameterVariadicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPrameterVariadic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionPrameterVariadic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionPrameterVariadic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrameterVariadic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPrameterVariadicContext functionPrameterVariadic() {
		FunctionPrameterVariadicContext _localctx = new FunctionPrameterVariadicContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_functionPrameterVariadic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(NAME);
			State = 213; variadic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariadicContext : ParserRuleContext {
		public VariadicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variadic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariadic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariadic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariadic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariadicContext variadic() {
		VariadicContext _localctx = new VariadicContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_variadic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefContext : ParserRuleContext {
		public RefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefContext @ref() {
		RefContext _localctx = new RefContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public InnerfunctionBlockContext[] innerfunctionBlock() {
			return GetRuleContexts<InnerfunctionBlockContext>();
		}
		public InnerfunctionBlockContext innerfunctionBlock(int i) {
			return GetRuleContext<InnerfunctionBlockContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(T__9);
			State = 223;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__11) | (1L << T__12) | (1L << T__16) | (1L << NAME))) != 0)) {
				{
				{
				State = 220; innerfunctionBlock();
				}
				}
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 226; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentBlockContext : ParserRuleContext {
		public LoopBlockContext[] loopBlock() {
			return GetRuleContexts<LoopBlockContext>();
		}
		public LoopBlockContext loopBlock(int i) {
			return GetRuleContext<LoopBlockContext>(i);
		}
		public SegmentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterSegmentBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitSegmentBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentBlockContext segmentBlock() {
		SegmentBlockContext _localctx = new SegmentBlockContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_segmentBlock);
		int _la;
		try {
			State = 237;
			switch (_input.La(1)) {
			case T__0:
			case T__4:
			case T__5:
			case T__6:
			case T__11:
			case T__12:
			case T__16:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; loopBlock();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; Match(T__9);
				State = 233;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__11) | (1L << T__12) | (1L << T__16) | (1L << NAME))) != 0)) {
					{
					{
					State = 230; loopBlock();
					}
					}
					State = 235;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 236; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisContext : ParserRuleContext {
		public ThisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterThis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitThis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisContext @this() {
		ThisContext _localctx = new ThisContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_this);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexFunctionCallContext : ParserRuleContext {
		public VariableOrFunctionContext variableOrFunction() {
			return GetRuleContext<VariableOrFunctionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ThisContext @this() {
			return GetRuleContext<ThisContext>(0);
		}
		public ComplexFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexFunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterComplexFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitComplexFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexFunctionCallContext complexFunctionCall() {
		ComplexFunctionCallContext _localctx = new ComplexFunctionCallContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_complexFunctionCall);
		int _la;
		try {
			State = 256;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				_la = _input.La(1);
				if (_la==T__16) {
					{
					State = 241; @this();
					State = 242; Match(T__17);
					}
				}

				State = 246; variableOrFunction(0);
				State = 247; Match(T__17);
				State = 248; functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				_la = _input.La(1);
				if (_la==T__16) {
					{
					State = 250; @this();
					State = 251; Match(T__17);
					}
				}

				State = 255; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexVariableContext : ParserRuleContext {
		public VariableOrFunctionContext variableOrFunction() {
			return GetRuleContext<VariableOrFunctionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ThisContext @this() {
			return GetRuleContext<ThisContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ComplexVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterComplexVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitComplexVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexVariableContext complexVariable() {
		ComplexVariableContext _localctx = new ComplexVariableContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_complexVariable);
		int _la;
		try {
			State = 283;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				_la = _input.La(1);
				if (_la==T__16) {
					{
					State = 258; @this();
					State = 259; Match(T__17);
					}
				}

				State = 263; variableOrFunction(0);
				State = 264; Match(T__17);
				State = 265; var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				_la = _input.La(1);
				if (_la==T__16) {
					{
					State = 267; @this();
					State = 268; Match(T__17);
					}
				}

				State = 272; var();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 276;
				_la = _input.La(1);
				if (_la==T__16) {
					{
					State = 273; @this();
					State = 274; Match(T__17);
					}
				}

				State = 278; variableOrFunction(0);
				State = 279; Match(T__18);
				State = 280; exp(0);
				State = 281; Match(T__19);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableOrFunctionContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public VariableOrFunctionContext[] variableOrFunction() {
			return GetRuleContexts<VariableOrFunctionContext>();
		}
		public VariableOrFunctionContext variableOrFunction(int i) {
			return GetRuleContext<VariableOrFunctionContext>(i);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VariableOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableOrFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableOrFunctionContext variableOrFunction() {
		return variableOrFunction(0);
	}

	private VariableOrFunctionContext variableOrFunction(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VariableOrFunctionContext _localctx = new VariableOrFunctionContext(_ctx, _parentState);
		VariableOrFunctionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_variableOrFunction, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 286; var();
				}
				break;

			case 2:
				{
				State = 287; functionCall();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 300;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 298;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new VariableOrFunctionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_variableOrFunction);
						State = 290;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 291; Match(T__17);
						State = 292; variableOrFunction(3);
						}
						break;

					case 2:
						{
						_localctx = new VariableOrFunctionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_variableOrFunction);
						State = 293;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 294; Match(T__18);
						State = 295; exp(0);
						State = 296; Match(T__19);
						}
						break;
					}
					} 
				}
				State = 302;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(NAME);
			State = 306; Match(T__1);
			State = 308;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__20) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << STRING) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 307; exp(0);
				}
			}

			State = 314;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 310; Match(T__13);
				State = 311; exp(0);
				}
				}
				State = 316;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 317; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNewInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNewInstance(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_newInstance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(T__20);
			State = 320; complexVariable();
			State = 321; Match(T__1);
			State = 323;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__20) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << STRING) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 322; exp(0);
				}
			}

			State = 329;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 325; Match(T__13);
				State = 326; exp(0);
				}
				}
				State = 331;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 332; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionFetchContext : ExpContext {
		public ComplexFunctionCallContext complexFunctionCall() {
			return GetRuleContext<ComplexFunctionCallContext>(0);
		}
		public FunctionFetchContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionFetch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryVarContext : ExpContext {
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public VariableOrFunctionContext variableOrFunction() {
			return GetRuleContext<VariableOrFunctionContext>(0);
		}
		public UnaryVarContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterUnaryVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitUnaryVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBitwiseContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpBitwiseContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpORContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public ExpORContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpOR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpOR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMulDivModContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public ExpMulDivModContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpContext : ExpContext {
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public ConstantExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterConstantExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitConstantExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableFetchContext : ExpContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public VariableFetchContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableFetch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignContext : ExpContext {
		public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		public VariableAssignContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpANDContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public ExpANDContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpAND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpAND(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAND(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpOpPowContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public ExpOpPowContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpOpPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpOpPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpOpPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewClassObjectContext : ExpContext {
		public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		public NewClassObjectContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNewClassObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNewClassObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewClassObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCompareContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public ExpCompareContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpConcatContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExpConcatContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpAddSubContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 335; constExp();
				}
				break;

			case 2:
				{
				_localctx = new VariableFetchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 336; complexVariable();
				}
				break;

			case 3:
				{
				_localctx = new FunctionFetchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 337; complexFunctionCall();
				}
				break;

			case 4:
				{
				_localctx = new NewClassObjectContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 338; newInstance();
				}
				break;

			case 5:
				{
				_localctx = new VariableAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 339; varAssign();
				}
				break;

			case 6:
				{
				_localctx = new UnaryVarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 340; operatorUnary();
				State = 341; variableOrFunction(0);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 378;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 376;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
					case 1:
						{
						_localctx = new ExpOpPowContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 345;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 346; operatorPower();
						State = 347; exp(8);
						}
						break;

					case 2:
						{
						_localctx = new ExpMulDivModContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 349;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 350; operatorMulDivMod();
						State = 351; exp(8);
						}
						break;

					case 3:
						{
						_localctx = new ExpAddSubContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 353;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 354; operatorAddSub();
						State = 355; exp(7);
						}
						break;

					case 4:
						{
						_localctx = new ExpConcatContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 357;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 358; Match(T__21);
						State = 359; exp(6);
						}
						break;

					case 5:
						{
						_localctx = new ExpCompareContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 360;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 361; operatorComparison();
						State = 362; exp(5);
						}
						break;

					case 6:
						{
						_localctx = new ExpBitwiseContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 364;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 365; operatorBitwise();
						State = 366; exp(4);
						}
						break;

					case 7:
						{
						_localctx = new ExpANDContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 368;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 369; operatorAnd();
						State = 370; exp(3);
						}
						break;

					case 8:
						{
						_localctx = new ExpORContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 372;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 373; operatorOr();
						State = 374; exp(2);
						}
						break;
					}
					} 
				}
				State = 380;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstExpContext : ParserRuleContext {
		public ConstExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExp; } }
	 
		public ConstExpContext() { }
		public virtual void CopyFrom(ConstExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : ConstExpContext {
		public ITerminalNode NUMBER() { return GetToken(MosesParser.NUMBER, 0); }
		public NumberContext(ConstExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ConstExpContext {
		public ITerminalNode STRING() { return GetToken(MosesParser.STRING, 0); }
		public StringContext(ConstExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpContext constExp() {
		ConstExpContext _localctx = new ConstExpContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_constExp);
		try {
			State = 383;
			switch (_input.La(1)) {
			case NUMBER:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 381; Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 382; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_la = _input.La(1);
			if ( !(_la==T__31 || _la==T__32) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__35) | (1L << T__36) | (1L << T__37))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return variableOrFunction_sempred((VariableOrFunctionContext)_localctx, predIndex);

		case 29: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool variableOrFunction_sempred(VariableOrFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 8);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 5);

		case 6: return Precpred(_ctx, 4);

		case 7: return Precpred(_ctx, 3);

		case 8: return Precpred(_ctx, 2);

		case 9: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x35\x194\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\a\x2R\n"+
		"\x2\f\x2\xE\x2U\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\\\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4h\n\x4\x3"+
		"\x4\x5\x4k\n\x4\x3\x5\x3\x5\x5\x5o\n\x5\x3\x6\x3\x6\x3\x6\x5\x6t\n\x6"+
		"\x3\a\x3\a\x3\a\x5\ay\n\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\a\t"+
		"\x83\n\t\f\t\xE\t\x86\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x5\r\x9B\n\r\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x5\xF\xA4\n\xF\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x3\x10\a\x10\xAB\n\x10\f\x10\xE\x10\xAE\v\x10\x3\x10\x3\x10\a"+
		"\x10\xB2\n\x10\f\x10\xE\x10\xB5\v\x10\x3\x10\x3\x10\x5\x10\xB9\n\x10\x3"+
		"\x10\x3\x10\x3\x10\a\x10\xBE\n\x10\f\x10\xE\x10\xC1\v\x10\x3\x10\x3\x10"+
		"\x5\x10\xC5\n\x10\x3\x10\x5\x10\xC8\n\x10\x3\x11\x5\x11\xCB\n\x11\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\xD0\n\x11\x3\x12\x5\x12\xD3\n\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\a\x16"+
		"\xE0\n\x16\f\x16\xE\x16\xE3\v\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\a"+
		"\x17\xEA\n\x17\f\x17\xE\x17\xED\v\x17\x3\x17\x5\x17\xF0\n\x17\x3\x18\x3"+
		"\x18\x3\x19\x3\x19\x3\x19\x5\x19\xF7\n\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x5\x19\x100\n\x19\x3\x19\x5\x19\x103\n\x19\x3\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x108\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x111\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x117"+
		"\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x11E\n\x1A\x3\x1B\x3"+
		"\x1B\x3\x1B\x5\x1B\x123\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\a\x1B\x12D\n\x1B\f\x1B\xE\x1B\x130\v\x1B\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x137\n\x1D\x3\x1D\x3\x1D\a\x1D\x13B\n\x1D"+
		"\f\x1D\xE\x1D\x13E\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5"+
		"\x1E\x146\n\x1E\x3\x1E\x3\x1E\a\x1E\x14A\n\x1E\f\x1E\xE\x1E\x14D\v\x1E"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x5\x1F\x15A\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x17B\n\x1F\f\x1F\xE\x1F\x17E\v"+
		"\x1F\x3 \x3 \x5 \x182\n \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3"+
		"&\x3&\x3\'\x3\'\x3(\x3(\x3(\x2\x2\x4\x34<)\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2\x2\a\x3\x2\x1B \x3\x2"+
		"\"%\x3\x2\"#\x4\x2\x11\x11&(\x4\x2%%),\x1A6\x2S\x3\x2\x2\x2\x4[\x3\x2"+
		"\x2\x2\x6j\x3\x2\x2\x2\bl\x3\x2\x2\x2\ns\x3\x2\x2\x2\fx\x3\x2\x2\x2\xE"+
		"z\x3\x2\x2\x2\x10~\x3\x2\x2\x2\x12\x89\x3\x2\x2\x2\x14\x8C\x3\x2\x2\x2"+
		"\x16\x92\x3\x2\x2\x2\x18\x9A\x3\x2\x2\x2\x1A\x9C\x3\x2\x2\x2\x1C\xA0\x3"+
		"\x2\x2\x2\x1E\xC7\x3\x2\x2\x2 \xCA\x3\x2\x2\x2\"\xD2\x3\x2\x2\x2$\xD6"+
		"\x3\x2\x2\x2&\xD9\x3\x2\x2\x2(\xDB\x3\x2\x2\x2*\xDD\x3\x2\x2\x2,\xEF\x3"+
		"\x2\x2\x2.\xF1\x3\x2\x2\x2\x30\x102\x3\x2\x2\x2\x32\x11D\x3\x2\x2\x2\x34"+
		"\x122\x3\x2\x2\x2\x36\x131\x3\x2\x2\x2\x38\x133\x3\x2\x2\x2:\x141\x3\x2"+
		"\x2\x2<\x159\x3\x2\x2\x2>\x181\x3\x2\x2\x2@\x183\x3\x2\x2\x2\x42\x185"+
		"\x3\x2\x2\x2\x44\x187\x3\x2\x2\x2\x46\x189\x3\x2\x2\x2H\x18B\x3\x2\x2"+
		"\x2J\x18D\x3\x2\x2\x2L\x18F\x3\x2\x2\x2N\x191\x3\x2\x2\x2PR\x5\x4\x3\x2"+
		"QP\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TV\x3\x2\x2\x2"+
		"US\x3\x2\x2\x2VW\a\x2\x2\x3W\x3\x3\x2\x2\x2X\\\x5\x6\x4\x2Y\\\x5\x12\n"+
		"\x2Z\\\x5\x10\t\x2[X\x3\x2\x2\x2[Y\x3\x2\x2\x2[Z\x3\x2\x2\x2\\\x5\x3\x2"+
		"\x2\x2]k\x5\x1A\xE\x2^k\x5\x30\x19\x2_k\x5\x18\r\x2`\x61\a\x3\x2\x2\x61"+
		"\x62\a\x4\x2\x2\x62\x63\x5<\x1F\x2\x63\x64\a\x5\x2\x2\x64g\x5,\x17\x2"+
		"\x65\x66\a\x6\x2\x2\x66h\x5,\x17\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2hk\x3"+
		"\x2\x2\x2ik\x5\b\x5\x2j]\x3\x2\x2\x2j^\x3\x2\x2\x2j_\x3\x2\x2\x2j`\x3"+
		"\x2\x2\x2ji\x3\x2\x2\x2k\a\x3\x2\x2\x2ln\a\a\x2\x2mo\x5<\x1F\x2nm\x3\x2"+
		"\x2\x2no\x3\x2\x2\x2o\t\x3\x2\x2\x2pt\x5\x6\x4\x2qt\a\b\x2\x2rt\a\t\x2"+
		"\x2sp\x3\x2\x2\x2sq\x3\x2\x2\x2sr\x3\x2\x2\x2t\v\x3\x2\x2\x2uy\x5\xE\b"+
		"\x2vy\x5\x12\n\x2wy\x5\x10\t\x2xu\x3\x2\x2\x2xv\x3\x2\x2\x2xw\x3\x2\x2"+
		"\x2y\r\x3\x2\x2\x2z{\a.\x2\x2{|\a\n\x2\x2|}\x5> \x2}\xF\x3\x2\x2\x2~\x7F"+
		"\a\v\x2\x2\x7F\x80\a.\x2\x2\x80\x84\a\f\x2\x2\x81\x83\x5\f\a\x2\x82\x81"+
		"\x3\x2\x2\x2\x83\x86\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3\x2\x2"+
		"\x2\x85\x87\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x87\x88\a\r\x2\x2\x88\x11"+
		"\x3\x2\x2\x2\x89\x8A\x5\x1C\xF\x2\x8A\x8B\x5*\x16\x2\x8B\x13\x3\x2\x2"+
		"\x2\x8C\x8D\a\xE\x2\x2\x8D\x8E\a\x4\x2\x2\x8E\x8F\x5<\x1F\x2\x8F\x90\a"+
		"\x5\x2\x2\x90\x91\x5,\x17\x2\x91\x15\x3\x2\x2\x2\x92\x93\a\xF\x2\x2\x93"+
		"\x94\a\x4\x2\x2\x94\x95\x5<\x1F\x2\x95\x96\a\x5\x2\x2\x96\x97\x5,\x17"+
		"\x2\x97\x17\x3\x2\x2\x2\x98\x9B\x5\x16\f\x2\x99\x9B\x5\x14\v\x2\x9A\x98"+
		"\x3\x2\x2\x2\x9A\x99\x3\x2\x2\x2\x9B\x19\x3\x2\x2\x2\x9C\x9D\x5\x32\x1A"+
		"\x2\x9D\x9E\a\n\x2\x2\x9E\x9F\x5<\x1F\x2\x9F\x1B\x3\x2\x2\x2\xA0\xA1\a"+
		".\x2\x2\xA1\xA3\a\x4\x2\x2\xA2\xA4\x5\x1E\x10\x2\xA3\xA2\x3\x2\x2\x2\xA3"+
		"\xA4\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA6\a\x5\x2\x2\xA6\x1D\x3\x2"+
		"\x2\x2\xA7\xAC\x5\"\x12\x2\xA8\xA9\a\x10\x2\x2\xA9\xAB\x5\"\x12\x2\xAA"+
		"\xA8\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2"+
		"\x2\x2\xAD\xB3\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB0\a\x10\x2\x2\xB0"+
		"\xB2\x5 \x11\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB1\x3\x2"+
		"\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB8\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6"+
		"\xB7\a\x10\x2\x2\xB7\xB9\x5$\x13\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2"+
		"\x2\x2\xB9\xC8\x3\x2\x2\x2\xBA\xBF\x5 \x11\x2\xBB\xBC\a\x10\x2\x2\xBC"+
		"\xBE\x5 \x11\x2\xBD\xBB\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2"+
		"\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC4\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC2"+
		"\xC3\a\x10\x2\x2\xC3\xC5\x5$\x13\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2"+
		"\x2\x2\xC5\xC8\x3\x2\x2\x2\xC6\xC8\x5$\x13\x2\xC7\xA7\x3\x2\x2\x2\xC7"+
		"\xBA\x3\x2\x2\x2\xC7\xC6\x3\x2\x2\x2\xC8\x1F\x3\x2\x2\x2\xC9\xCB\x5(\x15"+
		"\x2\xCA\xC9\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCF"+
		"\a.\x2\x2\xCD\xCE\a\n\x2\x2\xCE\xD0\x5> \x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0"+
		"\x3\x2\x2\x2\xD0!\x3\x2\x2\x2\xD1\xD3\x5(\x15\x2\xD2\xD1\x3\x2\x2\x2\xD2"+
		"\xD3\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5\a.\x2\x2\xD5#\x3\x2\x2\x2"+
		"\xD6\xD7\a.\x2\x2\xD7\xD8\x5&\x14\x2\xD8%\x3\x2\x2\x2\xD9\xDA\a\x11\x2"+
		"\x2\xDA\'\x3\x2\x2\x2\xDB\xDC\a\x12\x2\x2\xDC)\x3\x2\x2\x2\xDD\xE1\a\f"+
		"\x2\x2\xDE\xE0\x5\x6\x4\x2\xDF\xDE\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1"+
		"\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE4\x3\x2\x2\x2\xE3\xE1\x3\x2"+
		"\x2\x2\xE4\xE5\a\r\x2\x2\xE5+\x3\x2\x2\x2\xE6\xF0\x5\n\x6\x2\xE7\xEB\a"+
		"\f\x2\x2\xE8\xEA\x5\n\x6\x2\xE9\xE8\x3\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB"+
		"\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xEE\x3\x2\x2\x2\xED\xEB\x3\x2"+
		"\x2\x2\xEE\xF0\a\r\x2\x2\xEF\xE6\x3\x2\x2\x2\xEF\xE7\x3\x2\x2\x2\xF0-"+
		"\x3\x2\x2\x2\xF1\xF2\a\x13\x2\x2\xF2/\x3\x2\x2\x2\xF3\xF4\x5.\x18\x2\xF4"+
		"\xF5\a\x14\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6\xF3\x3\x2\x2\x2\xF6\xF7\x3\x2"+
		"\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9\x5\x34\x1B\x2\xF9\xFA\a\x14\x2\x2\xFA"+
		"\xFB\x5\x38\x1D\x2\xFB\x103\x3\x2\x2\x2\xFC\xFD\x5.\x18\x2\xFD\xFE\a\x14"+
		"\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFC\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100"+
		"\x101\x3\x2\x2\x2\x101\x103\x5\x38\x1D\x2\x102\xF6\x3\x2\x2\x2\x102\xFF"+
		"\x3\x2\x2\x2\x103\x31\x3\x2\x2\x2\x104\x105\x5.\x18\x2\x105\x106\a\x14"+
		"\x2\x2\x106\x108\x3\x2\x2\x2\x107\x104\x3\x2\x2\x2\x107\x108\x3\x2\x2"+
		"\x2\x108\x109\x3\x2\x2\x2\x109\x10A\x5\x34\x1B\x2\x10A\x10B\a\x14\x2\x2"+
		"\x10B\x10C\x5\x36\x1C\x2\x10C\x11E\x3\x2\x2\x2\x10D\x10E\x5.\x18\x2\x10E"+
		"\x10F\a\x14\x2\x2\x10F\x111\x3\x2\x2\x2\x110\x10D\x3\x2\x2\x2\x110\x111"+
		"\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x11E\x5\x36\x1C\x2\x113\x114\x5"+
		".\x18\x2\x114\x115\a\x14\x2\x2\x115\x117\x3\x2\x2\x2\x116\x113\x3\x2\x2"+
		"\x2\x116\x117\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x119\x5\x34\x1B\x2"+
		"\x119\x11A\a\x15\x2\x2\x11A\x11B\x5<\x1F\x2\x11B\x11C\a\x16\x2\x2\x11C"+
		"\x11E\x3\x2\x2\x2\x11D\x107\x3\x2\x2\x2\x11D\x110\x3\x2\x2\x2\x11D\x116"+
		"\x3\x2\x2\x2\x11E\x33\x3\x2\x2\x2\x11F\x120\b\x1B\x1\x2\x120\x123\x5\x36"+
		"\x1C\x2\x121\x123\x5\x38\x1D\x2\x122\x11F\x3\x2\x2\x2\x122\x121\x3\x2"+
		"\x2\x2\x123\x12E\x3\x2\x2\x2\x124\x125\f\x4\x2\x2\x125\x126\a\x14\x2\x2"+
		"\x126\x12D\x5\x34\x1B\x5\x127\x128\f\x3\x2\x2\x128\x129\a\x15\x2\x2\x129"+
		"\x12A\x5<\x1F\x2\x12A\x12B\a\x16\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x124"+
		"\x3\x2\x2\x2\x12C\x127\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3"+
		"\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x35\x3\x2\x2\x2\x130\x12E\x3\x2\x2"+
		"\x2\x131\x132\a.\x2\x2\x132\x37\x3\x2\x2\x2\x133\x134\a.\x2\x2\x134\x136"+
		"\a\x4\x2\x2\x135\x137\x5<\x1F\x2\x136\x135\x3\x2\x2\x2\x136\x137\x3\x2"+
		"\x2\x2\x137\x13C\x3\x2\x2\x2\x138\x139\a\x10\x2\x2\x139\x13B\x5<\x1F\x2"+
		"\x13A\x138\x3\x2\x2\x2\x13B\x13E\x3\x2\x2\x2\x13C\x13A\x3\x2\x2\x2\x13C"+
		"\x13D\x3\x2\x2\x2\x13D\x13F\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13F\x140"+
		"\a\x5\x2\x2\x140\x39\x3\x2\x2\x2\x141\x142\a\x17\x2\x2\x142\x143\x5\x32"+
		"\x1A\x2\x143\x145\a\x4\x2\x2\x144\x146\x5<\x1F\x2\x145\x144\x3\x2\x2\x2"+
		"\x145\x146\x3\x2\x2\x2\x146\x14B\x3\x2\x2\x2\x147\x148\a\x10\x2\x2\x148"+
		"\x14A\x5<\x1F\x2\x149\x147\x3\x2\x2\x2\x14A\x14D\x3\x2\x2\x2\x14B\x149"+
		"\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14E\x3\x2\x2\x2\x14D\x14B\x3"+
		"\x2\x2\x2\x14E\x14F\a\x5\x2\x2\x14F;\x3\x2\x2\x2\x150\x151\b\x1F\x1\x2"+
		"\x151\x15A\x5> \x2\x152\x15A\x5\x32\x1A\x2\x153\x15A\x5\x30\x19\x2\x154"+
		"\x15A\x5:\x1E\x2\x155\x15A\x5\x1A\xE\x2\x156\x157\x5H%\x2\x157\x158\x5"+
		"\x34\x1B\x2\x158\x15A\x3\x2\x2\x2\x159\x150\x3\x2\x2\x2\x159\x152\x3\x2"+
		"\x2\x2\x159\x153\x3\x2\x2\x2\x159\x154\x3\x2\x2\x2\x159\x155\x3\x2\x2"+
		"\x2\x159\x156\x3\x2\x2\x2\x15A\x17C\x3\x2\x2\x2\x15B\x15C\f\n\x2\x2\x15C"+
		"\x15D\x5\x46$\x2\x15D\x15E\x5<\x1F\n\x15E\x17B\x3\x2\x2\x2\x15F\x160\f"+
		"\t\x2\x2\x160\x161\x5L\'\x2\x161\x162\x5<\x1F\n\x162\x17B\x3\x2\x2\x2"+
		"\x163\x164\f\b\x2\x2\x164\x165\x5J&\x2\x165\x166\x5<\x1F\t\x166\x17B\x3"+
		"\x2\x2\x2\x167\x168\f\a\x2\x2\x168\x169\a\x18\x2\x2\x169\x17B\x5<\x1F"+
		"\b\x16A\x16B\f\x6\x2\x2\x16B\x16C\x5\x44#\x2\x16C\x16D\x5<\x1F\a\x16D"+
		"\x17B\x3\x2\x2\x2\x16E\x16F\f\x5\x2\x2\x16F\x170\x5N(\x2\x170\x171\x5"+
		"<\x1F\x6\x171\x17B\x3\x2\x2\x2\x172\x173\f\x4\x2\x2\x173\x174\x5\x42\""+
		"\x2\x174\x175\x5<\x1F\x5\x175\x17B\x3\x2\x2\x2\x176\x177\f\x3\x2\x2\x177"+
		"\x178\x5@!\x2\x178\x179\x5<\x1F\x4\x179\x17B\x3\x2\x2\x2\x17A\x15B\x3"+
		"\x2\x2\x2\x17A\x15F\x3\x2\x2\x2\x17A\x163\x3\x2\x2\x2\x17A\x167\x3\x2"+
		"\x2\x2\x17A\x16A\x3\x2\x2\x2\x17A\x16E\x3\x2\x2\x2\x17A\x172\x3\x2\x2"+
		"\x2\x17A\x176\x3\x2\x2\x2\x17B\x17E\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2"+
		"\x17C\x17D\x3\x2\x2\x2\x17D=\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17F\x182"+
		"\a/\x2\x2\x180\x182\a-\x2\x2\x181\x17F\x3\x2\x2\x2\x181\x180\x3\x2\x2"+
		"\x2\x182?\x3\x2\x2\x2\x183\x184\a\x19\x2\x2\x184\x41\x3\x2\x2\x2\x185"+
		"\x186\a\x1A\x2\x2\x186\x43\x3\x2\x2\x2\x187\x188\t\x2\x2\x2\x188\x45\x3"+
		"\x2\x2\x2\x189\x18A\a!\x2\x2\x18AG\x3\x2\x2\x2\x18B\x18C\t\x3\x2\x2\x18C"+
		"I\x3\x2\x2\x2\x18D\x18E\t\x4\x2\x2\x18EK\x3\x2\x2\x2\x18F\x190\t\x5\x2"+
		"\x2\x190M\x3\x2\x2\x2\x191\x192\t\x6\x2\x2\x192O\x3\x2\x2\x2*S[gjnsx\x84"+
		"\x9A\xA3\xAC\xB3\xB8\xBF\xC4\xC7\xCA\xCF\xD2\xE1\xEB\xEF\xF6\xFF\x102"+
		"\x107\x110\x116\x11D\x122\x12C\x12E\x136\x13C\x145\x14B\x159\x17A\x17C"+
		"\x181";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MOSES
