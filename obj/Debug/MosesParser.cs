//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Nick\Documents\Visual Studio 2015\Projects\MOSES\Moses.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MOSES {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MosesParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, STRING=44, NAME=45, 
		NUMBER=46, INT=47, HEX=48, FLOAT=49, Digit=50, WS=51, NL=52;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_innerfunctionBlock = 2, RULE_returnBlock = 3, 
		RULE_loopBlock = 4, RULE_classBlock = 5, RULE_localConstVarAssign = 6, 
		RULE_classDecl = 7, RULE_functionDecl = 8, RULE_whileLoop = 9, RULE_loop = 10, 
		RULE_loopParse = 11, RULE_loops = 12, RULE_varAssign = 13, RULE_functionDef = 14, 
		RULE_functionParameterList = 15, RULE_functionParameterDefault = 16, RULE_functionParameterNoDefault = 17, 
		RULE_functionPrameterVariadic = 18, RULE_variadic = 19, RULE_ref = 20, 
		RULE_functionBody = 21, RULE_segmentBlock = 22, RULE_this = 23, RULE_complexFunctionCall = 24, 
		RULE_complexVariable = 25, RULE_variableOrFunction = 26, RULE_var = 27, 
		RULE_functionCall = 28, RULE_newInstance = 29, RULE_exp = 30, RULE_constExp = 31, 
		RULE_operatorOr = 32, RULE_operatorAnd = 33, RULE_operatorComparison = 34, 
		RULE_operatorPower = 35, RULE_operatorUnary = 36, RULE_operatorAddSub = 37, 
		RULE_operatorMulDivMod = 38, RULE_operatorBitwise = 39;
	public static readonly string[] ruleNames = {
		"chunk", "block", "innerfunctionBlock", "returnBlock", "loopBlock", "classBlock", 
		"localConstVarAssign", "classDecl", "functionDecl", "whileLoop", "loop", 
		"loopParse", "loops", "varAssign", "functionDef", "functionParameterList", 
		"functionParameterDefault", "functionParameterNoDefault", "functionPrameterVariadic", 
		"variadic", "ref", "functionBody", "segmentBlock", "this", "complexFunctionCall", 
		"complexVariable", "variableOrFunction", "var", "functionCall", "newInstance", 
		"exp", "constExp", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorPower", "operatorUnary", "operatorAddSub", "operatorMulDivMod", 
		"operatorBitwise"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'('", "')'", "'else'", "'return'", "'break'", "'continue'", 
		"'='", "'class'", "'{'", "'}'", "'while'", "'loop'", "'loopParse'", "','", 
		"'*'", "'ref'", "'this'", "'.'", "'['", "']'", "'new'", "' . '", "'||'", 
		"'&&'", "'<'", "'>'", "'<='", "'>='", "'!='", "'=='", "'^'", "'+'", "'-'", 
		"'!'", "'~'", "'/'", "'%'", "'//'", "'&'", "'|'", "'<<'", "'>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "STRING", "NAME", "NUMBER", 
		"INT", "HEX", "FLOAT", "Digit", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Moses.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MosesParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MosesParser.Eof, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__17) | (1L << NAME))) != 0)) {
				{
				{
				State = 80; block();
				}
				}
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 86; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public InnerfunctionBlockContext innerfunctionBlock() {
			return GetRuleContext<InnerfunctionBlockContext>(0);
		}
		public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			State = 91;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; innerfunctionBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; functionDecl();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90; classDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerfunctionBlockContext : ParserRuleContext {
		public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		public ComplexFunctionCallContext complexFunctionCall() {
			return GetRuleContext<ComplexFunctionCallContext>(0);
		}
		public LoopsContext loops() {
			return GetRuleContext<LoopsContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext[] segmentBlock() {
			return GetRuleContexts<SegmentBlockContext>();
		}
		public SegmentBlockContext segmentBlock(int i) {
			return GetRuleContext<SegmentBlockContext>(i);
		}
		public ReturnBlockContext returnBlock() {
			return GetRuleContext<ReturnBlockContext>(0);
		}
		public InnerfunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerfunctionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterInnerfunctionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitInnerfunctionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerfunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerfunctionBlockContext innerfunctionBlock() {
		InnerfunctionBlockContext _localctx = new InnerfunctionBlockContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_innerfunctionBlock);
		try {
			State = 106;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; varAssign();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; complexFunctionCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; loops();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; Match(T__0);
				State = 97; Match(T__1);
				State = 98; exp(0);
				State = 99; Match(T__2);
				State = 100; segmentBlock();
				State = 103;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					State = 101; Match(T__3);
					State = 102; segmentBlock();
					}
					break;
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 105; returnBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnBlockContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ReturnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterReturnBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitReturnBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnBlockContext returnBlock() {
		ReturnBlockContext _localctx = new ReturnBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_returnBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(T__4);
			State = 110;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 109; exp(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		public InnerfunctionBlockContext innerfunctionBlock() {
			return GetRuleContext<InnerfunctionBlockContext>(0);
		}
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_loopBlock);
		try {
			State = 115;
			switch (_input.La(1)) {
			case T__0:
			case T__4:
			case T__11:
			case T__12:
			case T__13:
			case T__17:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; innerfunctionBlock();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; Match(T__5);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBlockContext : ParserRuleContext {
		public LocalConstVarAssignContext localConstVarAssign() {
			return GetRuleContext<LocalConstVarAssignContext>(0);
		}
		public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public ClassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterClassBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitClassBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBlockContext classBlock() {
		ClassBlockContext _localctx = new ClassBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classBlock);
		try {
			State = 120;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; localConstVarAssign();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; functionDecl();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119; classDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalConstVarAssignContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public LocalConstVarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localConstVarAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLocalConstVarAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLocalConstVarAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalConstVarAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalConstVarAssignContext localConstVarAssign() {
		LocalConstVarAssignContext _localctx = new LocalConstVarAssignContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_localConstVarAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(NAME);
			State = 123; Match(T__7);
			State = 124; constExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ClassBlockContext[] classBlock() {
			return GetRuleContexts<ClassBlockContext>();
		}
		public ClassBlockContext classBlock(int i) {
			return GetRuleContext<ClassBlockContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(T__8);
			State = 127; Match(NAME);
			State = 128; Match(T__9);
			State = 132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8 || _la==NAME) {
				{
				{
				State = 129; classBlock();
				}
				}
				State = 134;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 135; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public FunctionDefContext functionDef() {
			return GetRuleContext<FunctionDefContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; functionDef();
			State = 138; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext segmentBlock() {
			return GetRuleContext<SegmentBlockContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(T__11);
			State = 141; Match(T__1);
			State = 142; exp(0);
			State = 143; Match(T__2);
			State = 144; segmentBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SegmentBlockContext segmentBlock() {
			return GetRuleContext<SegmentBlockContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(T__12);
			State = 147; Match(T__1);
			State = 148; exp(0);
			State = 149; Match(T__2);
			State = 150; segmentBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopParseContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public SegmentBlockContext segmentBlock() {
			return GetRuleContext<SegmentBlockContext>(0);
		}
		public LoopParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopParse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoopParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoopParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopParseContext loopParse() {
		LoopParseContext _localctx = new LoopParseContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_loopParse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__13);
			State = 153; Match(T__1);
			State = 154; exp(0);
			State = 155; Match(T__14);
			State = 156; exp(0);
			State = 157; Match(T__2);
			State = 158; segmentBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopsContext : ParserRuleContext {
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public LoopParseContext loopParse() {
			return GetRuleContext<LoopParseContext>(0);
		}
		public LoopsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterLoops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitLoops(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoops(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopsContext loops() {
		LoopsContext _localctx = new LoopsContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_loops);
		try {
			State = 163;
			switch (_input.La(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; loop();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161; whileLoop();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162; loopParse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignContext : ParserRuleContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVarAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVarAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignContext varAssign() {
		VarAssignContext _localctx = new VarAssignContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_varAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; complexVariable();
			State = 166; Match(T__7);
			State = 167; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(NAME);
			State = 170; Match(T__1);
			State = 172;
			_la = _input.La(1);
			if (_la==T__16 || _la==NAME) {
				{
				State = 171; functionParameterList();
				}
			}

			State = 174; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterListContext : ParserRuleContext {
		public FunctionParameterNoDefaultContext[] functionParameterNoDefault() {
			return GetRuleContexts<FunctionParameterNoDefaultContext>();
		}
		public FunctionParameterNoDefaultContext functionParameterNoDefault(int i) {
			return GetRuleContext<FunctionParameterNoDefaultContext>(i);
		}
		public FunctionParameterDefaultContext[] functionParameterDefault() {
			return GetRuleContexts<FunctionParameterDefaultContext>();
		}
		public FunctionParameterDefaultContext functionParameterDefault(int i) {
			return GetRuleContext<FunctionParameterDefaultContext>(i);
		}
		public FunctionPrameterVariadicContext functionPrameterVariadic() {
			return GetRuleContext<FunctionPrameterVariadicContext>(0);
		}
		public FunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterListContext functionParameterList() {
		FunctionParameterListContext _localctx = new FunctionParameterListContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_functionParameterList);
		int _la;
		try {
			int _alt;
			State = 208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; functionParameterNoDefault();
				State = 181;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 177; Match(T__14);
						State = 178; functionParameterNoDefault();
						}
						} 
					}
					State = 183;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				}
				State = 188;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 184; Match(T__14);
						State = 185; functionParameterDefault();
						}
						} 
					}
					State = 190;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				}
				State = 193;
				_la = _input.La(1);
				if (_la==T__14) {
					{
					State = 191; Match(T__14);
					State = 192; functionPrameterVariadic();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; functionParameterDefault();
				State = 200;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 196; Match(T__14);
						State = 197; functionParameterDefault();
						}
						} 
					}
					State = 202;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				}
				State = 205;
				_la = _input.La(1);
				if (_la==T__14) {
					{
					State = 203; Match(T__14);
					State = 204; functionPrameterVariadic();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 207; functionPrameterVariadic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterDefaultContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public FunctionParameterDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterDefaultContext functionParameterDefault() {
		FunctionParameterDefaultContext _localctx = new FunctionParameterDefaultContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_functionParameterDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = _input.La(1);
			if (_la==T__16) {
				{
				State = 210; @ref();
				}
			}

			State = 213; Match(NAME);
			State = 216;
			_la = _input.La(1);
			if (_la==T__7) {
				{
				State = 214; Match(T__7);
				State = 215; constExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterNoDefaultContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public FunctionParameterNoDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterNoDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionParameterNoDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionParameterNoDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterNoDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterNoDefaultContext functionParameterNoDefault() {
		FunctionParameterNoDefaultContext _localctx = new FunctionParameterNoDefaultContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_functionParameterNoDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_la = _input.La(1);
			if (_la==T__16) {
				{
				State = 218; @ref();
				}
			}

			State = 221; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPrameterVariadicContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public VariadicContext variadic() {
			return GetRuleContext<VariadicContext>(0);
		}
		public FunctionPrameterVariadicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPrameterVariadic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionPrameterVariadic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionPrameterVariadic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrameterVariadic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPrameterVariadicContext functionPrameterVariadic() {
		FunctionPrameterVariadicContext _localctx = new FunctionPrameterVariadicContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_functionPrameterVariadic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(NAME);
			State = 224; variadic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariadicContext : ParserRuleContext {
		public VariadicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variadic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariadic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariadic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariadic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariadicContext variadic() {
		VariadicContext _localctx = new VariadicContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_variadic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefContext : ParserRuleContext {
		public RefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefContext @ref() {
		RefContext _localctx = new RefContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public InnerfunctionBlockContext[] innerfunctionBlock() {
			return GetRuleContexts<InnerfunctionBlockContext>();
		}
		public InnerfunctionBlockContext innerfunctionBlock(int i) {
			return GetRuleContext<InnerfunctionBlockContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(T__9);
			State = 234;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__17) | (1L << NAME))) != 0)) {
				{
				{
				State = 231; innerfunctionBlock();
				}
				}
				State = 236;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 237; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentBlockContext : ParserRuleContext {
		public LoopBlockContext[] loopBlock() {
			return GetRuleContexts<LoopBlockContext>();
		}
		public LoopBlockContext loopBlock(int i) {
			return GetRuleContext<LoopBlockContext>(i);
		}
		public SegmentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterSegmentBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitSegmentBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentBlockContext segmentBlock() {
		SegmentBlockContext _localctx = new SegmentBlockContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_segmentBlock);
		int _la;
		try {
			State = 248;
			switch (_input.La(1)) {
			case T__0:
			case T__4:
			case T__5:
			case T__6:
			case T__11:
			case T__12:
			case T__13:
			case T__17:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; loopBlock();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; Match(T__9);
				State = 244;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__17) | (1L << NAME))) != 0)) {
					{
					{
					State = 241; loopBlock();
					}
					}
					State = 246;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 247; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisContext : ParserRuleContext {
		public ThisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterThis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitThis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisContext @this() {
		ThisContext _localctx = new ThisContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_this);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexFunctionCallContext : ParserRuleContext {
		public VariableOrFunctionContext variableOrFunction() {
			return GetRuleContext<VariableOrFunctionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ThisContext @this() {
			return GetRuleContext<ThisContext>(0);
		}
		public ComplexFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexFunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterComplexFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitComplexFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexFunctionCallContext complexFunctionCall() {
		ComplexFunctionCallContext _localctx = new ComplexFunctionCallContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_complexFunctionCall);
		int _la;
		try {
			State = 267;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 252; @this();
					State = 253; Match(T__18);
					}
				}

				State = 257; variableOrFunction(0);
				State = 258; Match(T__18);
				State = 259; functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 261; @this();
					State = 262; Match(T__18);
					}
				}

				State = 266; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexVariableContext : ParserRuleContext {
		public VariableOrFunctionContext variableOrFunction() {
			return GetRuleContext<VariableOrFunctionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ThisContext @this() {
			return GetRuleContext<ThisContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ComplexVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterComplexVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitComplexVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexVariableContext complexVariable() {
		ComplexVariableContext _localctx = new ComplexVariableContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_complexVariable);
		int _la;
		try {
			State = 294;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 269; @this();
					State = 270; Match(T__18);
					}
				}

				State = 274; variableOrFunction(0);
				State = 275; Match(T__18);
				State = 276; var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 278; @this();
					State = 279; Match(T__18);
					}
				}

				State = 283; var();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287;
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 284; @this();
					State = 285; Match(T__18);
					}
				}

				State = 289; variableOrFunction(0);
				State = 290; Match(T__19);
				State = 291; exp(0);
				State = 292; Match(T__20);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableOrFunctionContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public VariableOrFunctionContext[] variableOrFunction() {
			return GetRuleContexts<VariableOrFunctionContext>();
		}
		public VariableOrFunctionContext variableOrFunction(int i) {
			return GetRuleContext<VariableOrFunctionContext>(i);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VariableOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableOrFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableOrFunctionContext variableOrFunction() {
		return variableOrFunction(0);
	}

	private VariableOrFunctionContext variableOrFunction(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		VariableOrFunctionContext _localctx = new VariableOrFunctionContext(_ctx, _parentState);
		VariableOrFunctionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_variableOrFunction, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 297; var();
				}
				break;

			case 2:
				{
				State = 298; functionCall();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 311;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 309;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new VariableOrFunctionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_variableOrFunction);
						State = 301;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 302; Match(T__18);
						State = 303; variableOrFunction(3);
						}
						break;

					case 2:
						{
						_localctx = new VariableOrFunctionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_variableOrFunction);
						State = 304;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 305; Match(T__19);
						State = 306; exp(0);
						State = 307; Match(T__20);
						}
						break;
					}
					} 
				}
				State = 313;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(MosesParser.NAME, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(NAME);
			State = 317; Match(T__1);
			State = 319;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__21) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << STRING) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 318; exp(0);
				}
			}

			State = 325;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__14) {
				{
				{
				State = 321; Match(T__14);
				State = 322; exp(0);
				}
				}
				State = 327;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 328; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNewInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNewInstance(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_newInstance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(T__21);
			State = 331; complexVariable();
			State = 332; Match(T__1);
			State = 334;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__21) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << STRING) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 333; exp(0);
				}
			}

			State = 340;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__14) {
				{
				{
				State = 336; Match(T__14);
				State = 337; exp(0);
				}
				}
				State = 342;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 343; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionFetchContext : ExpContext {
		public ComplexFunctionCallContext complexFunctionCall() {
			return GetRuleContext<ComplexFunctionCallContext>(0);
		}
		public FunctionFetchContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterFunctionFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitFunctionFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionFetch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryVarContext : ExpContext {
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public VariableOrFunctionContext variableOrFunction() {
			return GetRuleContext<VariableOrFunctionContext>(0);
		}
		public UnaryVarContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterUnaryVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitUnaryVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBitwiseContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpBitwiseContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpORContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public ExpORContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpOR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpOR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMulDivModContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public ExpMulDivModContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpContext : ExpContext {
		public ConstExpContext constExp() {
			return GetRuleContext<ConstExpContext>(0);
		}
		public ConstantExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterConstantExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitConstantExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableFetchContext : ExpContext {
		public ComplexVariableContext complexVariable() {
			return GetRuleContext<ComplexVariableContext>(0);
		}
		public VariableFetchContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableFetch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignContext : ExpContext {
		public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		public VariableAssignContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterVariableAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitVariableAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpANDContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public ExpANDContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpAND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpAND(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAND(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpOpPowContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public ExpOpPowContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpOpPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpOpPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpOpPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewClassObjectContext : ExpContext {
		public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		public NewClassObjectContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNewClassObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNewClassObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewClassObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCompareContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public ExpCompareContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpConcatContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExpConcatContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpAddSubContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 346; constExp();
				}
				break;

			case 2:
				{
				_localctx = new VariableFetchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 347; complexVariable();
				}
				break;

			case 3:
				{
				_localctx = new FunctionFetchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 348; complexFunctionCall();
				}
				break;

			case 4:
				{
				_localctx = new NewClassObjectContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 349; newInstance();
				}
				break;

			case 5:
				{
				_localctx = new VariableAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 350; varAssign();
				}
				break;

			case 6:
				{
				_localctx = new UnaryVarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 351; operatorUnary();
				State = 352; variableOrFunction(0);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 389;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 387;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
					case 1:
						{
						_localctx = new ExpOpPowContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 356;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 357; operatorPower();
						State = 358; exp(8);
						}
						break;

					case 2:
						{
						_localctx = new ExpMulDivModContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 360;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 361; operatorMulDivMod();
						State = 362; exp(8);
						}
						break;

					case 3:
						{
						_localctx = new ExpAddSubContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 364;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 365; operatorAddSub();
						State = 366; exp(7);
						}
						break;

					case 4:
						{
						_localctx = new ExpConcatContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 368;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 369; Match(T__22);
						State = 370; exp(6);
						}
						break;

					case 5:
						{
						_localctx = new ExpCompareContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 371;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 372; operatorComparison();
						State = 373; exp(5);
						}
						break;

					case 6:
						{
						_localctx = new ExpBitwiseContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 375;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 376; operatorBitwise();
						State = 377; exp(4);
						}
						break;

					case 7:
						{
						_localctx = new ExpANDContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 379;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 380; operatorAnd();
						State = 381; exp(3);
						}
						break;

					case 8:
						{
						_localctx = new ExpORContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 383;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 384; operatorOr();
						State = 385; exp(2);
						}
						break;
					}
					} 
				}
				State = 391;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstExpContext : ParserRuleContext {
		public ConstExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExp; } }
	 
		public ConstExpContext() { }
		public virtual void CopyFrom(ConstExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : ConstExpContext {
		public ITerminalNode NUMBER() { return GetToken(MosesParser.NUMBER, 0); }
		public NumberContext(ConstExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ConstExpContext {
		public ITerminalNode STRING() { return GetToken(MosesParser.STRING, 0); }
		public StringContext(ConstExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpContext constExp() {
		ConstExpContext _localctx = new ConstExpContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_constExp);
		try {
			State = 394;
			switch (_input.La(1)) {
			case NUMBER:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 392; Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 393; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = _input.La(1);
			if ( !(_la==T__32 || _la==T__33) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__36) | (1L << T__37) | (1L << T__38))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMosesListener typedListener = listener as IMosesListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMosesVisitor<TResult> typedVisitor = visitor as IMosesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__35) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return variableOrFunction_sempred((VariableOrFunctionContext)_localctx, predIndex);

		case 30: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool variableOrFunction_sempred(VariableOrFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 8);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 5);

		case 6: return Precpred(_ctx, 4);

		case 7: return Precpred(_ctx, 3);

		case 8: return Precpred(_ctx, 2);

		case 9: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x36\x19F\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\a\x2T\n\x2\f\x2\xE\x2W\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3^\n\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4j\n"+
		"\x4\x3\x4\x5\x4m\n\x4\x3\x5\x3\x5\x5\x5q\n\x5\x3\x6\x3\x6\x3\x6\x5\x6"+
		"v\n\x6\x3\a\x3\a\x3\a\x5\a{\n\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3"+
		"\t\a\t\x85\n\t\f\t\xE\t\x88\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\xA6\n\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\x3\x10\x5\x10\xAF\n\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\a\x11\xB6\n\x11\f\x11\xE\x11\xB9\v\x11\x3\x11\x3\x11\a\x11\xBD"+
		"\n\x11\f\x11\xE\x11\xC0\v\x11\x3\x11\x3\x11\x5\x11\xC4\n\x11\x3\x11\x3"+
		"\x11\x3\x11\a\x11\xC9\n\x11\f\x11\xE\x11\xCC\v\x11\x3\x11\x3\x11\x5\x11"+
		"\xD0\n\x11\x3\x11\x5\x11\xD3\n\x11\x3\x12\x5\x12\xD6\n\x12\x3\x12\x3\x12"+
		"\x3\x12\x5\x12\xDB\n\x12\x3\x13\x5\x13\xDE\n\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\a\x17\xEB\n\x17"+
		"\f\x17\xE\x17\xEE\v\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\a\x18\xF5\n"+
		"\x18\f\x18\xE\x18\xF8\v\x18\x3\x18\x5\x18\xFB\n\x18\x3\x19\x3\x19\x3\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x102\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x10B\n\x1A\x3\x1A\x5\x1A\x10E\n\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x113\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x11C\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x122\n\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x129\n\x1B\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x12E\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\a\x1C\x138\n\x1C\f\x1C\xE\x1C\x13B\v\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\x5\x1E\x142\n\x1E\x3\x1E\x3\x1E\a\x1E\x146\n\x1E\f\x1E\xE\x1E"+
		"\x149\v\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x151\n\x1F"+
		"\x3\x1F\x3\x1F\a\x1F\x155\n\x1F\f\x1F\xE\x1F\x158\v\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x165\n \x3 \x3 \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \a \x186\n \f \xE \x189\v \x3!\x3!\x5"+
		"!\x18D\n!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3("+
		"\x3)\x3)\x3)\x2\x2\x4\x36>*\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2\x2\a\x3\x2\x1C!\x3\x2#&\x3\x2#$"+
		"\x4\x2\x12\x12\')\x4\x2&&*-\x1B1\x2U\x3\x2\x2\x2\x4]\x3\x2\x2\x2\x6l\x3"+
		"\x2\x2\x2\bn\x3\x2\x2\x2\nu\x3\x2\x2\x2\fz\x3\x2\x2\x2\xE|\x3\x2\x2\x2"+
		"\x10\x80\x3\x2\x2\x2\x12\x8B\x3\x2\x2\x2\x14\x8E\x3\x2\x2\x2\x16\x94\x3"+
		"\x2\x2\x2\x18\x9A\x3\x2\x2\x2\x1A\xA5\x3\x2\x2\x2\x1C\xA7\x3\x2\x2\x2"+
		"\x1E\xAB\x3\x2\x2\x2 \xD2\x3\x2\x2\x2\"\xD5\x3\x2\x2\x2$\xDD\x3\x2\x2"+
		"\x2&\xE1\x3\x2\x2\x2(\xE4\x3\x2\x2\x2*\xE6\x3\x2\x2\x2,\xE8\x3\x2\x2\x2"+
		".\xFA\x3\x2\x2\x2\x30\xFC\x3\x2\x2\x2\x32\x10D\x3\x2\x2\x2\x34\x128\x3"+
		"\x2\x2\x2\x36\x12D\x3\x2\x2\x2\x38\x13C\x3\x2\x2\x2:\x13E\x3\x2\x2\x2"+
		"<\x14C\x3\x2\x2\x2>\x164\x3\x2\x2\x2@\x18C\x3\x2\x2\x2\x42\x18E\x3\x2"+
		"\x2\x2\x44\x190\x3\x2\x2\x2\x46\x192\x3\x2\x2\x2H\x194\x3\x2\x2\x2J\x196"+
		"\x3\x2\x2\x2L\x198\x3\x2\x2\x2N\x19A\x3\x2\x2\x2P\x19C\x3\x2\x2\x2RT\x5"+
		"\x4\x3\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2VX\x3"+
		"\x2\x2\x2WU\x3\x2\x2\x2XY\a\x2\x2\x3Y\x3\x3\x2\x2\x2Z^\x5\x6\x4\x2[^\x5"+
		"\x12\n\x2\\^\x5\x10\t\x2]Z\x3\x2\x2\x2][\x3\x2\x2\x2]\\\x3\x2\x2\x2^\x5"+
		"\x3\x2\x2\x2_m\x5\x1C\xF\x2`m\x5\x32\x1A\x2\x61m\x5\x1A\xE\x2\x62\x63"+
		"\a\x3\x2\x2\x63\x64\a\x4\x2\x2\x64\x65\x5> \x2\x65\x66\a\x5\x2\x2\x66"+
		"i\x5.\x18\x2gh\a\x6\x2\x2hj\x5.\x18\x2ig\x3\x2\x2\x2ij\x3\x2\x2\x2jm\x3"+
		"\x2\x2\x2km\x5\b\x5\x2l_\x3\x2\x2\x2l`\x3\x2\x2\x2l\x61\x3\x2\x2\x2l\x62"+
		"\x3\x2\x2\x2lk\x3\x2\x2\x2m\a\x3\x2\x2\x2np\a\a\x2\x2oq\x5> \x2po\x3\x2"+
		"\x2\x2pq\x3\x2\x2\x2q\t\x3\x2\x2\x2rv\x5\x6\x4\x2sv\a\b\x2\x2tv\a\t\x2"+
		"\x2ur\x3\x2\x2\x2us\x3\x2\x2\x2ut\x3\x2\x2\x2v\v\x3\x2\x2\x2w{\x5\xE\b"+
		"\x2x{\x5\x12\n\x2y{\x5\x10\t\x2zw\x3\x2\x2\x2zx\x3\x2\x2\x2zy\x3\x2\x2"+
		"\x2{\r\x3\x2\x2\x2|}\a/\x2\x2}~\a\n\x2\x2~\x7F\x5@!\x2\x7F\xF\x3\x2\x2"+
		"\x2\x80\x81\a\v\x2\x2\x81\x82\a/\x2\x2\x82\x86\a\f\x2\x2\x83\x85\x5\f"+
		"\a\x2\x84\x83\x3\x2\x2\x2\x85\x88\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x86"+
		"\x87\x3\x2\x2\x2\x87\x89\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x89\x8A\a\r\x2"+
		"\x2\x8A\x11\x3\x2\x2\x2\x8B\x8C\x5\x1E\x10\x2\x8C\x8D\x5,\x17\x2\x8D\x13"+
		"\x3\x2\x2\x2\x8E\x8F\a\xE\x2\x2\x8F\x90\a\x4\x2\x2\x90\x91\x5> \x2\x91"+
		"\x92\a\x5\x2\x2\x92\x93\x5.\x18\x2\x93\x15\x3\x2\x2\x2\x94\x95\a\xF\x2"+
		"\x2\x95\x96\a\x4\x2\x2\x96\x97\x5> \x2\x97\x98\a\x5\x2\x2\x98\x99\x5."+
		"\x18\x2\x99\x17\x3\x2\x2\x2\x9A\x9B\a\x10\x2\x2\x9B\x9C\a\x4\x2\x2\x9C"+
		"\x9D\x5> \x2\x9D\x9E\a\x11\x2\x2\x9E\x9F\x5> \x2\x9F\xA0\a\x5\x2\x2\xA0"+
		"\xA1\x5.\x18\x2\xA1\x19\x3\x2\x2\x2\xA2\xA6\x5\x16\f\x2\xA3\xA6\x5\x14"+
		"\v\x2\xA4\xA6\x5\x18\r\x2\xA5\xA2\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5"+
		"\xA4\x3\x2\x2\x2\xA6\x1B\x3\x2\x2\x2\xA7\xA8\x5\x34\x1B\x2\xA8\xA9\a\n"+
		"\x2\x2\xA9\xAA\x5> \x2\xAA\x1D\x3\x2\x2\x2\xAB\xAC\a/\x2\x2\xAC\xAE\a"+
		"\x4\x2\x2\xAD\xAF\x5 \x11\x2\xAE\xAD\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF"+
		"\xB0\x3\x2\x2\x2\xB0\xB1\a\x5\x2\x2\xB1\x1F\x3\x2\x2\x2\xB2\xB7\x5$\x13"+
		"\x2\xB3\xB4\a\x11\x2\x2\xB4\xB6\x5$\x13\x2\xB5\xB3\x3\x2\x2\x2\xB6\xB9"+
		"\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBE\x3\x2\x2"+
		"\x2\xB9\xB7\x3\x2\x2\x2\xBA\xBB\a\x11\x2\x2\xBB\xBD\x5\"\x12\x2\xBC\xBA"+
		"\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2"+
		"\x2\xBF\xC3\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC2\a\x11\x2\x2\xC2\xC4"+
		"\x5&\x14\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xD3\x3\x2\x2\x2"+
		"\xC5\xCA\x5\"\x12\x2\xC6\xC7\a\x11\x2\x2\xC7\xC9\x5\"\x12\x2\xC8\xC6\x3"+
		"\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2"+
		"\xCB\xCF\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xCE\a\x11\x2\x2\xCE\xD0\x5"+
		"&\x14\x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1"+
		"\xD3\x5&\x14\x2\xD2\xB2\x3\x2\x2\x2\xD2\xC5\x3\x2\x2\x2\xD2\xD1\x3\x2"+
		"\x2\x2\xD3!\x3\x2\x2\x2\xD4\xD6\x5*\x16\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6"+
		"\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xDA\a/\x2\x2\xD8\xD9\a\n\x2\x2\xD9"+
		"\xDB\x5@!\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB#\x3\x2\x2\x2"+
		"\xDC\xDE\x5*\x16\x2\xDD\xDC\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDF\x3"+
		"\x2\x2\x2\xDF\xE0\a/\x2\x2\xE0%\x3\x2\x2\x2\xE1\xE2\a/\x2\x2\xE2\xE3\x5"+
		"(\x15\x2\xE3\'\x3\x2\x2\x2\xE4\xE5\a\x12\x2\x2\xE5)\x3\x2\x2\x2\xE6\xE7"+
		"\a\x13\x2\x2\xE7+\x3\x2\x2\x2\xE8\xEC\a\f\x2\x2\xE9\xEB\x5\x6\x4\x2\xEA"+
		"\xE9\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xED\x3\x2"+
		"\x2\x2\xED\xEF\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF0\a\r\x2\x2\xF0-"+
		"\x3\x2\x2\x2\xF1\xFB\x5\n\x6\x2\xF2\xF6\a\f\x2\x2\xF3\xF5\x5\n\x6\x2\xF4"+
		"\xF3\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2"+
		"\x2\x2\xF7\xF9\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFB\a\r\x2\x2\xFA\xF1"+
		"\x3\x2\x2\x2\xFA\xF2\x3\x2\x2\x2\xFB/\x3\x2\x2\x2\xFC\xFD\a\x14\x2\x2"+
		"\xFD\x31\x3\x2\x2\x2\xFE\xFF\x5\x30\x19\x2\xFF\x100\a\x15\x2\x2\x100\x102"+
		"\x3\x2\x2\x2\x101\xFE\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103\x3\x2"+
		"\x2\x2\x103\x104\x5\x36\x1C\x2\x104\x105\a\x15\x2\x2\x105\x106\x5:\x1E"+
		"\x2\x106\x10E\x3\x2\x2\x2\x107\x108\x5\x30\x19\x2\x108\x109\a\x15\x2\x2"+
		"\x109\x10B\x3\x2\x2\x2\x10A\x107\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B"+
		"\x10C\x3\x2\x2\x2\x10C\x10E\x5:\x1E\x2\x10D\x101\x3\x2\x2\x2\x10D\x10A"+
		"\x3\x2\x2\x2\x10E\x33\x3\x2\x2\x2\x10F\x110\x5\x30\x19\x2\x110\x111\a"+
		"\x15\x2\x2\x111\x113\x3\x2\x2\x2\x112\x10F\x3\x2\x2\x2\x112\x113\x3\x2"+
		"\x2\x2\x113\x114\x3\x2\x2\x2\x114\x115\x5\x36\x1C\x2\x115\x116\a\x15\x2"+
		"\x2\x116\x117\x5\x38\x1D\x2\x117\x129\x3\x2\x2\x2\x118\x119\x5\x30\x19"+
		"\x2\x119\x11A\a\x15\x2\x2\x11A\x11C\x3\x2\x2\x2\x11B\x118\x3\x2\x2\x2"+
		"\x11B\x11C\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x129\x5\x38\x1D\x2\x11E"+
		"\x11F\x5\x30\x19\x2\x11F\x120\a\x15\x2\x2\x120\x122\x3\x2\x2\x2\x121\x11E"+
		"\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124\x5"+
		"\x36\x1C\x2\x124\x125\a\x16\x2\x2\x125\x126\x5> \x2\x126\x127\a\x17\x2"+
		"\x2\x127\x129\x3\x2\x2\x2\x128\x112\x3\x2\x2\x2\x128\x11B\x3\x2\x2\x2"+
		"\x128\x121\x3\x2\x2\x2\x129\x35\x3\x2\x2\x2\x12A\x12B\b\x1C\x1\x2\x12B"+
		"\x12E\x5\x38\x1D\x2\x12C\x12E\x5:\x1E\x2\x12D\x12A\x3\x2\x2\x2\x12D\x12C"+
		"\x3\x2\x2\x2\x12E\x139\x3\x2\x2\x2\x12F\x130\f\x4\x2\x2\x130\x131\a\x15"+
		"\x2\x2\x131\x138\x5\x36\x1C\x5\x132\x133\f\x3\x2\x2\x133\x134\a\x16\x2"+
		"\x2\x134\x135\x5> \x2\x135\x136\a\x17\x2\x2\x136\x138\x3\x2\x2\x2\x137"+
		"\x12F\x3\x2\x2\x2\x137\x132\x3\x2\x2\x2\x138\x13B\x3\x2\x2\x2\x139\x137"+
		"\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x37\x3\x2\x2\x2\x13B\x139\x3\x2"+
		"\x2\x2\x13C\x13D\a/\x2\x2\x13D\x39\x3\x2\x2\x2\x13E\x13F\a/\x2\x2\x13F"+
		"\x141\a\x4\x2\x2\x140\x142\x5> \x2\x141\x140\x3\x2\x2\x2\x141\x142\x3"+
		"\x2\x2\x2\x142\x147\x3\x2\x2\x2\x143\x144\a\x11\x2\x2\x144\x146\x5> \x2"+
		"\x145\x143\x3\x2\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147"+
		"\x148\x3\x2\x2\x2\x148\x14A\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A\x14B"+
		"\a\x5\x2\x2\x14B;\x3\x2\x2\x2\x14C\x14D\a\x18\x2\x2\x14D\x14E\x5\x34\x1B"+
		"\x2\x14E\x150\a\x4\x2\x2\x14F\x151\x5> \x2\x150\x14F\x3\x2\x2\x2\x150"+
		"\x151\x3\x2\x2\x2\x151\x156\x3\x2\x2\x2\x152\x153\a\x11\x2\x2\x153\x155"+
		"\x5> \x2\x154\x152\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2"+
		"\x2\x156\x157\x3\x2\x2\x2\x157\x159\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2"+
		"\x159\x15A\a\x5\x2\x2\x15A=\x3\x2\x2\x2\x15B\x15C\b \x1\x2\x15C\x165\x5"+
		"@!\x2\x15D\x165\x5\x34\x1B\x2\x15E\x165\x5\x32\x1A\x2\x15F\x165\x5<\x1F"+
		"\x2\x160\x165\x5\x1C\xF\x2\x161\x162\x5J&\x2\x162\x163\x5\x36\x1C\x2\x163"+
		"\x165\x3\x2\x2\x2\x164\x15B\x3\x2\x2\x2\x164\x15D\x3\x2\x2\x2\x164\x15E"+
		"\x3\x2\x2\x2\x164\x15F\x3\x2\x2\x2\x164\x160\x3\x2\x2\x2\x164\x161\x3"+
		"\x2\x2\x2\x165\x187\x3\x2\x2\x2\x166\x167\f\n\x2\x2\x167\x168\x5H%\x2"+
		"\x168\x169\x5> \n\x169\x186\x3\x2\x2\x2\x16A\x16B\f\t\x2\x2\x16B\x16C"+
		"\x5N(\x2\x16C\x16D\x5> \n\x16D\x186\x3\x2\x2\x2\x16E\x16F\f\b\x2\x2\x16F"+
		"\x170\x5L\'\x2\x170\x171\x5> \t\x171\x186\x3\x2\x2\x2\x172\x173\f\a\x2"+
		"\x2\x173\x174\a\x19\x2\x2\x174\x186\x5> \b\x175\x176\f\x6\x2\x2\x176\x177"+
		"\x5\x46$\x2\x177\x178\x5> \a\x178\x186\x3\x2\x2\x2\x179\x17A\f\x5\x2\x2"+
		"\x17A\x17B\x5P)\x2\x17B\x17C\x5> \x6\x17C\x186\x3\x2\x2\x2\x17D\x17E\f"+
		"\x4\x2\x2\x17E\x17F\x5\x44#\x2\x17F\x180\x5> \x5\x180\x186\x3\x2\x2\x2"+
		"\x181\x182\f\x3\x2\x2\x182\x183\x5\x42\"\x2\x183\x184\x5> \x4\x184\x186"+
		"\x3\x2\x2\x2\x185\x166\x3\x2\x2\x2\x185\x16A\x3\x2\x2\x2\x185\x16E\x3"+
		"\x2\x2\x2\x185\x172\x3\x2\x2\x2\x185\x175\x3\x2\x2\x2\x185\x179\x3\x2"+
		"\x2\x2\x185\x17D\x3\x2\x2\x2\x185\x181\x3\x2\x2\x2\x186\x189\x3\x2\x2"+
		"\x2\x187\x185\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188?\x3\x2\x2\x2\x189"+
		"\x187\x3\x2\x2\x2\x18A\x18D\a\x30\x2\x2\x18B\x18D\a.\x2\x2\x18C\x18A\x3"+
		"\x2\x2\x2\x18C\x18B\x3\x2\x2\x2\x18D\x41\x3\x2\x2\x2\x18E\x18F\a\x1A\x2"+
		"\x2\x18F\x43\x3\x2\x2\x2\x190\x191\a\x1B\x2\x2\x191\x45\x3\x2\x2\x2\x192"+
		"\x193\t\x2\x2\x2\x193G\x3\x2\x2\x2\x194\x195\a\"\x2\x2\x195I\x3\x2\x2"+
		"\x2\x196\x197\t\x3\x2\x2\x197K\x3\x2\x2\x2\x198\x199\t\x4\x2\x2\x199M"+
		"\x3\x2\x2\x2\x19A\x19B\t\x5\x2\x2\x19BO\x3\x2\x2\x2\x19C\x19D\t\x6\x2"+
		"\x2\x19DQ\x3\x2\x2\x2*U]ilpuz\x86\xA5\xAE\xB7\xBE\xC3\xCA\xCF\xD2\xD5"+
		"\xDA\xDD\xEC\xF6\xFA\x101\x10A\x10D\x112\x11B\x121\x128\x12D\x137\x139"+
		"\x141\x147\x150\x156\x164\x185\x187\x18C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MOSES
